/*! 
* Copyright (c) Tiny Technologies, Inc. All rights reserved.
* Licensed under the LGPL or a commercial license.
* For LGPL see License.txt in the project root for license information.
* For commercial licenses see https://www.tiny.cloud/
* 
*  Version: 5.7.0 (2021-02-10)
*  */
!function(e){var r={};function a(n){if(r[n])return r[n].exports;var t=r[n]={i:n,l:!1,exports:{}};return e[n].call(t.exports,t,t.exports,a),t.l=!0,t.exports}a.m=e,a.c=r,a.d=function(n,t,e){a.o(n,t)||Object.defineProperty(n,t,{configurable:!1,enumerable:!0,get:e})},a.r=function(n){Object.defineProperty(n,"__esModule",{value:!0})},a.n=function(n){var t=n&&n.__esModule?function(){return n["default"]}:function(){return n};return a.d(t,"a",t),t},a.o=function(n,t){return Object.prototype.hasOwnProperty.call(n,t)},a.p="",a(a.s="./src/js/plugins/textpattern/plugin.js")}({"./src/js/plugins/textpattern/plugin.js":function(module,exports){eval("/**\n  * Copyright (c) Tiny Technologies, Inc. All rights reserved.\n  * Licensed under the LGPL or a commercial license.\n  * For LGPL see License.txt in the project root for license information.\n  * For commercial licenses see https://www.tiny.cloud/\n  *\n  * Version: 5.7.0 (2021-02-10)\n  */\n (function () {\n    'use strict';\n\n    var Cell = function (initial) {\n      var value = initial;\n      var get = function () {\n        return value;\n      };\n      var set = function (v) {\n        value = v;\n      };\n      return {\n        get: get,\n        set: set\n      };\n    };\n\n    var global = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    var __assign = function () {\n      __assign = Object.assign || function __assign(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n          s = arguments[i];\n          for (var p in s)\n            if (Object.prototype.hasOwnProperty.call(s, p))\n              t[p] = s[p];\n        }\n        return t;\n      };\n      return __assign.apply(this, arguments);\n    };\n    function __spreadArrays() {\n      for (var s = 0, i = 0, il = arguments.length; i < il; i++)\n        s += arguments[i].length;\n      for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n          r[k] = a[j];\n      return r;\n    }\n\n    var noop = function () {\n    };\n    var constant = function (value) {\n      return function () {\n        return value;\n      };\n    };\n    var identity = function (x) {\n      return x;\n    };\n    var die = function (msg) {\n      return function () {\n        throw new Error(msg);\n      };\n    };\n    var never = constant(false);\n    var always = constant(true);\n\n    var none = function () {\n      return NONE;\n    };\n    var NONE = function () {\n      var eq = function (o) {\n        return o.isNone();\n      };\n      var call = function (thunk) {\n        return thunk();\n      };\n      var id = function (n) {\n        return n;\n      };\n      var me = {\n        fold: function (n, _s) {\n          return n();\n        },\n        is: never,\n        isSome: never,\n        isNone: always,\n        getOr: id,\n        getOrThunk: call,\n        getOrDie: function (msg) {\n          throw new Error(msg || 'error: getOrDie called on none.');\n        },\n        getOrNull: constant(null),\n        getOrUndefined: constant(undefined),\n        or: id,\n        orThunk: call,\n        map: none,\n        each: noop,\n        bind: none,\n        exists: never,\n        forall: always,\n        filter: none,\n        equals: eq,\n        equals_: eq,\n        toArray: function () {\n          return [];\n        },\n        toString: constant('none()')\n      };\n      return me;\n    }();\n    var some = function (a) {\n      var constant_a = constant(a);\n      var self = function () {\n        return me;\n      };\n      var bind = function (f) {\n        return f(a);\n      };\n      var me = {\n        fold: function (n, s) {\n          return s(a);\n        },\n        is: function (v) {\n          return a === v;\n        },\n        isSome: always,\n        isNone: never,\n        getOr: constant_a,\n        getOrThunk: constant_a,\n        getOrDie: constant_a,\n        getOrNull: constant_a,\n        getOrUndefined: constant_a,\n        or: self,\n        orThunk: self,\n        map: function (f) {\n          return some(f(a));\n        },\n        each: function (f) {\n          f(a);\n        },\n        bind: bind,\n        exists: bind,\n        forall: bind,\n        filter: function (f) {\n          return f(a) ? me : NONE;\n        },\n        toArray: function () {\n          return [a];\n        },\n        toString: function () {\n          return 'some(' + a + ')';\n        },\n        equals: function (o) {\n          return o.is(a);\n        },\n        equals_: function (o, elementEq) {\n          return o.fold(never, function (b) {\n            return elementEq(a, b);\n          });\n        }\n      };\n      return me;\n    };\n    var from = function (value) {\n      return value === null || value === undefined ? NONE : some(value);\n    };\n    var Optional = {\n      some: some,\n      none: none,\n      from: from\n    };\n\n    var typeOf = function (x) {\n      var t = typeof x;\n      if (x === null) {\n        return 'null';\n      } else if (t === 'object' && (Array.prototype.isPrototypeOf(x) || x.constructor && x.constructor.name === 'Array')) {\n        return 'array';\n      } else if (t === 'object' && (String.prototype.isPrototypeOf(x) || x.constructor && x.constructor.name === 'String')) {\n        return 'string';\n      } else {\n        return t;\n      }\n    };\n    var isType = function (type) {\n      return function (value) {\n        return typeOf(value) === type;\n      };\n    };\n    var isString = isType('string');\n    var isObject = isType('object');\n    var isArray = isType('array');\n\n    var nativeSlice = Array.prototype.slice;\n    var nativeIndexOf = Array.prototype.indexOf;\n    var rawIndexOf = function (ts, t) {\n      return nativeIndexOf.call(ts, t);\n    };\n    var contains = function (xs, x) {\n      return rawIndexOf(xs, x) > -1;\n    };\n    var map = function (xs, f) {\n      var len = xs.length;\n      var r = new Array(len);\n      for (var i = 0; i < len; i++) {\n        var x = xs[i];\n        r[i] = f(x, i);\n      }\n      return r;\n    };\n    var each = function (xs, f) {\n      for (var i = 0, len = xs.length; i < len; i++) {\n        var x = xs[i];\n        f(x, i);\n      }\n    };\n    var eachr = function (xs, f) {\n      for (var i = xs.length - 1; i >= 0; i--) {\n        var x = xs[i];\n        f(x, i);\n      }\n    };\n    var filter = function (xs, pred) {\n      var r = [];\n      for (var i = 0, len = xs.length; i < len; i++) {\n        var x = xs[i];\n        if (pred(x, i)) {\n          r.push(x);\n        }\n      }\n      return r;\n    };\n    var foldr = function (xs, f, acc) {\n      eachr(xs, function (x) {\n        acc = f(acc, x);\n      });\n      return acc;\n    };\n    var foldl = function (xs, f, acc) {\n      each(xs, function (x) {\n        acc = f(acc, x);\n      });\n      return acc;\n    };\n    var findUntil = function (xs, pred, until) {\n      for (var i = 0, len = xs.length; i < len; i++) {\n        var x = xs[i];\n        if (pred(x, i)) {\n          return Optional.some(x);\n        } else if (until(x, i)) {\n          break;\n        }\n      }\n      return Optional.none();\n    };\n    var find = function (xs, pred) {\n      return findUntil(xs, pred, never);\n    };\n    var forall = function (xs, pred) {\n      for (var i = 0, len = xs.length; i < len; ++i) {\n        var x = xs[i];\n        if (pred(x, i) !== true) {\n          return false;\n        }\n      }\n      return true;\n    };\n    var sort = function (xs, comparator) {\n      var copy = nativeSlice.call(xs, 0);\n      copy.sort(comparator);\n      return copy;\n    };\n    var get = function (xs, i) {\n      return i >= 0 && i < xs.length ? Optional.some(xs[i]) : Optional.none();\n    };\n    var head = function (xs) {\n      return get(xs, 0);\n    };\n\n    var keys = Object.keys;\n    var hasOwnProperty = Object.hasOwnProperty;\n    var has = function (obj, key) {\n      return hasOwnProperty.call(obj, key);\n    };\n\n    var generate = function (cases) {\n      if (!isArray(cases)) {\n        throw new Error('cases must be an array');\n      }\n      if (cases.length === 0) {\n        throw new Error('there must be at least one case');\n      }\n      var constructors = [];\n      var adt = {};\n      each(cases, function (acase, count) {\n        var keys$1 = keys(acase);\n        if (keys$1.length !== 1) {\n          throw new Error('one and only one name per case');\n        }\n        var key = keys$1[0];\n        var value = acase[key];\n        if (adt[key] !== undefined) {\n          throw new Error('duplicate key detected:' + key);\n        } else if (key === 'cata') {\n          throw new Error('cannot have a case named cata (sorry)');\n        } else if (!isArray(value)) {\n          throw new Error('case arguments must be an array');\n        }\n        constructors.push(key);\n        adt[key] = function () {\n          var args = [];\n          for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n          }\n          var argLength = args.length;\n          if (argLength !== value.length) {\n            throw new Error('Wrong number of arguments to case ' + key + '. Expected ' + value.length + ' (' + value + '), got ' + argLength);\n          }\n          var match = function (branches) {\n            var branchKeys = keys(branches);\n            if (constructors.length !== branchKeys.length) {\n              throw new Error('Wrong number of arguments to match. Expected: ' + constructors.join(',') + '\\nActual: ' + branchKeys.join(','));\n            }\n            var allReqd = forall(constructors, function (reqKey) {\n              return contains(branchKeys, reqKey);\n            });\n            if (!allReqd) {\n              throw new Error('Not all branches were specified when using match. Specified: ' + branchKeys.join(', ') + '\\nRequired: ' + constructors.join(', '));\n            }\n            return branches[key].apply(null, args);\n          };\n          return {\n            fold: function () {\n              var foldArgs = [];\n              for (var _i = 0; _i < arguments.length; _i++) {\n                foldArgs[_i] = arguments[_i];\n              }\n              if (foldArgs.length !== cases.length) {\n                throw new Error('Wrong number of arguments to fold. Expected ' + cases.length + ', got ' + foldArgs.length);\n              }\n              var target = foldArgs[count];\n              return target.apply(null, args);\n            },\n            match: match,\n            log: function (label) {\n              console.log(label, {\n                constructors: constructors,\n                constructor: key,\n                params: args\n              });\n            }\n          };\n        };\n      });\n      return adt;\n    };\n    var Adt = { generate: generate };\n\n    var comparison = Adt.generate([\n      {\n        bothErrors: [\n          'error1',\n          'error2'\n        ]\n      },\n      {\n        firstError: [\n          'error1',\n          'value2'\n        ]\n      },\n      {\n        secondError: [\n          'value1',\n          'error2'\n        ]\n      },\n      {\n        bothValues: [\n          'value1',\n          'value2'\n        ]\n      }\n    ]);\n    var partition = function (results) {\n      var errors = [];\n      var values = [];\n      each(results, function (result) {\n        result.fold(function (err) {\n          errors.push(err);\n        }, function (value) {\n          values.push(value);\n        });\n      });\n      return {\n        errors: errors,\n        values: values\n      };\n    };\n\n    var value = function (o) {\n      var is = function (v) {\n        return o === v;\n      };\n      var or = function (_opt) {\n        return value(o);\n      };\n      var orThunk = function (_f) {\n        return value(o);\n      };\n      var map = function (f) {\n        return value(f(o));\n      };\n      var mapError = function (_f) {\n        return value(o);\n      };\n      var each = function (f) {\n        f(o);\n      };\n      var bind = function (f) {\n        return f(o);\n      };\n      var fold = function (_, onValue) {\n        return onValue(o);\n      };\n      var exists = function (f) {\n        return f(o);\n      };\n      var forall = function (f) {\n        return f(o);\n      };\n      var toOptional = function () {\n        return Optional.some(o);\n      };\n      return {\n        is: is,\n        isValue: always,\n        isError: never,\n        getOr: constant(o),\n        getOrThunk: constant(o),\n        getOrDie: constant(o),\n        or: or,\n        orThunk: orThunk,\n        fold: fold,\n        map: map,\n        mapError: mapError,\n        each: each,\n        bind: bind,\n        exists: exists,\n        forall: forall,\n        toOptional: toOptional\n      };\n    };\n    var error = function (message) {\n      var getOrThunk = function (f) {\n        return f();\n      };\n      var getOrDie = function () {\n        return die(String(message))();\n      };\n      var or = function (opt) {\n        return opt;\n      };\n      var orThunk = function (f) {\n        return f();\n      };\n      var map = function (_f) {\n        return error(message);\n      };\n      var mapError = function (f) {\n        return error(f(message));\n      };\n      var bind = function (_f) {\n        return error(message);\n      };\n      var fold = function (onError, _) {\n        return onError(message);\n      };\n      return {\n        is: never,\n        isValue: never,\n        isError: always,\n        getOr: identity,\n        getOrThunk: getOrThunk,\n        getOrDie: getOrDie,\n        or: or,\n        orThunk: orThunk,\n        fold: fold,\n        map: map,\n        mapError: mapError,\n        each: noop,\n        bind: bind,\n        exists: never,\n        forall: always,\n        toOptional: Optional.none\n      };\n    };\n    var fromOption = function (opt, err) {\n      return opt.fold(function () {\n        return error(err);\n      }, value);\n    };\n    var Result = {\n      value: value,\n      error: error,\n      fromOption: fromOption\n    };\n\n    var isInlinePattern = function (pattern) {\n      return pattern.type === 'inline-command' || pattern.type === 'inline-format';\n    };\n    var isBlockPattern = function (pattern) {\n      return pattern.type === 'block-command' || pattern.type === 'block-format';\n    };\n    var sortPatterns = function (patterns) {\n      return sort(patterns, function (a, b) {\n        if (a.start.length === b.start.length) {\n          return 0;\n        }\n        return a.start.length > b.start.length ? -1 : 1;\n      });\n    };\n    var normalizePattern = function (pattern) {\n      var err = function (message) {\n        return Result.error({\n          message: message,\n          pattern: pattern\n        });\n      };\n      var formatOrCmd = function (name, onFormat, onCommand) {\n        if (pattern.format !== undefined) {\n          var formats = void 0;\n          if (isArray(pattern.format)) {\n            if (!forall(pattern.format, isString)) {\n              return err(name + ' pattern has non-string items in the `format` array');\n            }\n            formats = pattern.format;\n          } else if (isString(pattern.format)) {\n            formats = [pattern.format];\n          } else {\n            return err(name + ' pattern has non-string `format` parameter');\n          }\n          return Result.value(onFormat(formats));\n        } else if (pattern.cmd !== undefined) {\n          if (!isString(pattern.cmd)) {\n            return err(name + ' pattern has non-string `cmd` parameter');\n          }\n          return Result.value(onCommand(pattern.cmd, pattern.value));\n        } else {\n          return err(name + ' pattern is missing both `format` and `cmd` parameters');\n        }\n      };\n      if (!isObject(pattern)) {\n        return err('Raw pattern is not an object');\n      }\n      if (!isString(pattern.start)) {\n        return err('Raw pattern is missing `start` parameter');\n      }\n      if (pattern.end !== undefined) {\n        if (!isString(pattern.end)) {\n          return err('Inline pattern has non-string `end` parameter');\n        }\n        if (pattern.start.length === 0 && pattern.end.length === 0) {\n          return err('Inline pattern has empty `start` and `end` parameters');\n        }\n        var start_1 = pattern.start;\n        var end_1 = pattern.end;\n        if (end_1.length === 0) {\n          end_1 = start_1;\n          start_1 = '';\n        }\n        return formatOrCmd('Inline', function (format) {\n          return {\n            type: 'inline-format',\n            start: start_1,\n            end: end_1,\n            format: format\n          };\n        }, function (cmd, value) {\n          return {\n            type: 'inline-command',\n            start: start_1,\n            end: end_1,\n            cmd: cmd,\n            value: value\n          };\n        });\n      } else if (pattern.replacement !== undefined) {\n        if (!isString(pattern.replacement)) {\n          return err('Replacement pattern has non-string `replacement` parameter');\n        }\n        if (pattern.start.length === 0) {\n          return err('Replacement pattern has empty `start` parameter');\n        }\n        return Result.value({\n          type: 'inline-command',\n          start: '',\n          end: pattern.start,\n          cmd: 'mceInsertContent',\n          value: pattern.replacement\n        });\n      } else {\n        if (pattern.start.length === 0) {\n          return err('Block pattern has empty `start` parameter');\n        }\n        return formatOrCmd('Block', function (formats) {\n          return {\n            type: 'block-format',\n            start: pattern.start,\n            format: formats[0]\n          };\n        }, function (command, commandValue) {\n          return {\n            type: 'block-command',\n            start: pattern.start,\n            cmd: command,\n            value: commandValue\n          };\n        });\n      }\n    };\n    var denormalizePattern = function (pattern) {\n      if (pattern.type === 'block-command') {\n        return {\n          start: pattern.start,\n          cmd: pattern.cmd,\n          value: pattern.value\n        };\n      } else if (pattern.type === 'block-format') {\n        return {\n          start: pattern.start,\n          format: pattern.format\n        };\n      } else if (pattern.type === 'inline-command') {\n        if (pattern.cmd === 'mceInsertContent' && pattern.start === '') {\n          return {\n            start: pattern.end,\n            replacement: pattern.value\n          };\n        } else {\n          return {\n            start: pattern.start,\n            end: pattern.end,\n            cmd: pattern.cmd,\n            value: pattern.value\n          };\n        }\n      } else if (pattern.type === 'inline-format') {\n        return {\n          start: pattern.start,\n          end: pattern.end,\n          format: pattern.format.length === 1 ? pattern.format[0] : pattern.format\n        };\n      }\n    };\n    var createPatternSet = function (patterns) {\n      return {\n        inlinePatterns: filter(patterns, isInlinePattern),\n        blockPatterns: sortPatterns(filter(patterns, isBlockPattern))\n      };\n    };\n\n    var get$1 = function (patternsState) {\n      var setPatterns = function (newPatterns) {\n        var normalized = partition(map(newPatterns, normalizePattern));\n        if (normalized.errors.length > 0) {\n          var firstError = normalized.errors[0];\n          throw new Error(firstError.message + ':\\n' + JSON.stringify(firstError.pattern, null, 2));\n        }\n        patternsState.set(createPatternSet(normalized.values));\n      };\n      var getPatterns = function () {\n        return __spreadArrays(map(patternsState.get().inlinePatterns, denormalizePattern), map(patternsState.get().blockPatterns, denormalizePattern));\n      };\n      return {\n        setPatterns: setPatterns,\n        getPatterns: getPatterns\n      };\n    };\n\n    var Global = typeof window !== 'undefined' ? window : Function('return this;')();\n\n    var error$1 = function () {\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      var console = Global.console;\n      if (console) {\n        if (console.error) {\n          console.error.apply(console, args);\n        } else {\n          console.log.apply(console, args);\n        }\n      }\n    };\n    var defaultPatterns = [\n      {\n        start: '*',\n        end: '*',\n        format: 'italic'\n      },\n      {\n        start: '**',\n        end: '**',\n        format: 'bold'\n      },\n      {\n        start: '#',\n        format: 'h1'\n      },\n      {\n        start: '##',\n        format: 'h2'\n      },\n      {\n        start: '###',\n        format: 'h3'\n      },\n      {\n        start: '####',\n        format: 'h4'\n      },\n      {\n        start: '#####',\n        format: 'h5'\n      },\n      {\n        start: '######',\n        format: 'h6'\n      },\n      {\n        start: '1. ',\n        cmd: 'InsertOrderedList'\n      },\n      {\n        start: '* ',\n        cmd: 'InsertUnorderedList'\n      },\n      {\n        start: '- ',\n        cmd: 'InsertUnorderedList'\n      }\n    ];\n    var getPatternSet = function (editor) {\n      var patterns = editor.getParam('textpattern_patterns', defaultPatterns, 'array');\n      if (!isArray(patterns)) {\n        error$1('The setting textpattern_patterns should be an array');\n        return {\n          inlinePatterns: [],\n          blockPatterns: []\n        };\n      }\n      var normalized = partition(map(patterns, normalizePattern));\n      each(normalized.errors, function (err) {\n        return error$1(err.message, err.pattern);\n      });\n      return createPatternSet(normalized.values);\n    };\n    var getForcedRootBlock = function (editor) {\n      var block = editor.getParam('forced_root_block', 'p');\n      if (block === false) {\n        return '';\n      } else if (block === true) {\n        return 'p';\n      } else {\n        return block;\n      }\n    };\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.util.Delay');\n\n    var global$2 = tinymce.util.Tools.resolve('tinymce.util.VK');\n\n    var zeroWidth = '\\uFEFF';\n    var nbsp = '\\xA0';\n\n    var global$3 = tinymce.util.Tools.resolve('tinymce.util.Tools');\n\n    var global$4 = tinymce.util.Tools.resolve('tinymce.dom.DOMUtils');\n\n    var global$5 = tinymce.util.Tools.resolve('tinymce.dom.TextSeeker');\n\n    var point = function (container, offset) {\n      return {\n        container: container,\n        offset: offset\n      };\n    };\n\n    var isText = function (node) {\n      return node.nodeType === Node.TEXT_NODE;\n    };\n    var cleanEmptyNodes = function (dom, node, isRoot) {\n      if (node && dom.isEmpty(node) && !isRoot(node)) {\n        var parent_1 = node.parentNode;\n        dom.remove(node);\n        cleanEmptyNodes(dom, parent_1, isRoot);\n      }\n    };\n    var deleteRng = function (dom, rng, isRoot, clean) {\n      if (clean === void 0) {\n        clean = true;\n      }\n      var startParent = rng.startContainer.parentNode;\n      var endParent = rng.endContainer.parentNode;\n      rng.deleteContents();\n      if (clean && !isRoot(rng.startContainer)) {\n        if (isText(rng.startContainer) && rng.startContainer.data.length === 0) {\n          dom.remove(rng.startContainer);\n        }\n        if (isText(rng.endContainer) && rng.endContainer.data.length === 0) {\n          dom.remove(rng.endContainer);\n        }\n        cleanEmptyNodes(dom, startParent, isRoot);\n        if (startParent !== endParent) {\n          cleanEmptyNodes(dom, endParent, isRoot);\n        }\n      }\n    };\n    var isBlockFormatName = function (name, formatter) {\n      var formatSet = formatter.get(name);\n      return isArray(formatSet) && head(formatSet).exists(function (format) {\n        return has(format, 'block');\n      });\n    };\n    var isReplacementPattern = function (pattern) {\n      return pattern.start.length === 0;\n    };\n    var getParentBlock = function (editor, rng) {\n      var parentBlockOpt = Optional.from(editor.dom.getParent(rng.startContainer, editor.dom.isBlock));\n      if (getForcedRootBlock(editor) === '') {\n        return parentBlockOpt.orThunk(function () {\n          return Optional.some(editor.getBody());\n        });\n      } else {\n        return parentBlockOpt;\n      }\n    };\n\n    var DOM = global$4.DOM;\n    var alwaysNext = function (startNode) {\n      return function (node) {\n        return startNode === node ? -1 : 0;\n      };\n    };\n    var isBoundary = function (dom) {\n      return function (node) {\n        return dom.isBlock(node) || contains([\n          'BR',\n          'IMG',\n          'HR',\n          'INPUT'\n        ], node.nodeName) || dom.getContentEditable(node) === 'false';\n      };\n    };\n    var textBefore = function (node, offset, rootNode) {\n      if (isText(node) && offset >= 0) {\n        return Optional.some(point(node, offset));\n      } else {\n        var textSeeker = global$5(DOM);\n        return Optional.from(textSeeker.backwards(node, offset, alwaysNext(node), rootNode)).map(function (prev) {\n          return point(prev.container, prev.container.data.length);\n        });\n      }\n    };\n    var textAfter = function (node, offset, rootNode) {\n      if (isText(node) && offset >= node.length) {\n        return Optional.some(point(node, offset));\n      } else {\n        var textSeeker = global$5(DOM);\n        return Optional.from(textSeeker.forwards(node, offset, alwaysNext(node), rootNode)).map(function (prev) {\n          return point(prev.container, 0);\n        });\n      }\n    };\n    var scanLeft = function (node, offset, rootNode) {\n      if (!isText(node)) {\n        return Optional.none();\n      }\n      var text = node.textContent;\n      if (offset >= 0 && offset <= text.length) {\n        return Optional.some(point(node, offset));\n      } else {\n        var textSeeker = global$5(DOM);\n        return Optional.from(textSeeker.backwards(node, offset, alwaysNext(node), rootNode)).bind(function (prev) {\n          var prevText = prev.container.data;\n          return scanLeft(prev.container, offset + prevText.length, rootNode);\n        });\n      }\n    };\n    var scanRight = function (node, offset, rootNode) {\n      if (!isText(node)) {\n        return Optional.none();\n      }\n      var text = node.textContent;\n      if (offset <= text.length) {\n        return Optional.some(point(node, offset));\n      } else {\n        var textSeeker = global$5(DOM);\n        return Optional.from(textSeeker.forwards(node, offset, alwaysNext(node), rootNode)).bind(function (next) {\n          return scanRight(next.container, offset - text.length, rootNode);\n        });\n      }\n    };\n    var repeatLeft = function (dom, node, offset, process, rootNode) {\n      var search = global$5(dom, isBoundary(dom));\n      return Optional.from(search.backwards(node, offset, process, rootNode));\n    };\n\n    var generatePath = function (root, node, offset) {\n      if (isText(node) && (offset < 0 || offset > node.data.length)) {\n        return [];\n      }\n      var p = [offset];\n      var current = node;\n      while (current !== root && current.parentNode) {\n        var parent_1 = current.parentNode;\n        for (var i = 0; i < parent_1.childNodes.length; i++) {\n          if (parent_1.childNodes[i] === current) {\n            p.push(i);\n            break;\n          }\n        }\n        current = parent_1;\n      }\n      return current === root ? p.reverse() : [];\n    };\n    var generatePathRange = function (root, startNode, startOffset, endNode, endOffset) {\n      var start = generatePath(root, startNode, startOffset);\n      var end = generatePath(root, endNode, endOffset);\n      return {\n        start: start,\n        end: end\n      };\n    };\n    var resolvePath = function (root, path) {\n      var nodePath = path.slice();\n      var offset = nodePath.pop();\n      var resolvedNode = foldl(nodePath, function (optNode, index) {\n        return optNode.bind(function (node) {\n          return Optional.from(node.childNodes[index]);\n        });\n      }, Optional.some(root));\n      return resolvedNode.bind(function (node) {\n        if (isText(node) && (offset < 0 || offset > node.data.length)) {\n          return Optional.none();\n        } else {\n          return Optional.some({\n            node: node,\n            offset: offset\n          });\n        }\n      });\n    };\n    var resolvePathRange = function (root, range) {\n      return resolvePath(root, range.start).bind(function (_a) {\n        var startNode = _a.node, startOffset = _a.offset;\n        return resolvePath(root, range.end).map(function (_a) {\n          var endNode = _a.node, endOffset = _a.offset;\n          var rng = document.createRange();\n          rng.setStart(startNode, startOffset);\n          rng.setEnd(endNode, endOffset);\n          return rng;\n        });\n      });\n    };\n    var generatePathRangeFromRange = function (root, range) {\n      return generatePathRange(root, range.startContainer, range.startOffset, range.endContainer, range.endOffset);\n    };\n\n    var stripPattern = function (dom, block, pattern) {\n      var firstTextNode = textAfter(block, 0, block);\n      firstTextNode.each(function (spot) {\n        var node = spot.container;\n        scanRight(node, pattern.start.length, block).each(function (end) {\n          var rng = dom.createRng();\n          rng.setStart(node, 0);\n          rng.setEnd(end.container, end.offset);\n          deleteRng(dom, rng, function (e) {\n            return e === block;\n          });\n        });\n      });\n    };\n    var applyPattern = function (editor, match) {\n      var dom = editor.dom;\n      var pattern = match.pattern;\n      var rng = resolvePathRange(dom.getRoot(), match.range).getOrDie('Unable to resolve path range');\n      getParentBlock(editor, rng).each(function (block) {\n        if (pattern.type === 'block-format') {\n          if (isBlockFormatName(pattern.format, editor.formatter)) {\n            editor.undoManager.transact(function () {\n              stripPattern(editor.dom, block, pattern);\n              editor.formatter.apply(pattern.format);\n            });\n          }\n        } else if (pattern.type === 'block-command') {\n          editor.undoManager.transact(function () {\n            stripPattern(editor.dom, block, pattern);\n            editor.execCommand(pattern.cmd, false, pattern.value);\n          });\n        }\n      });\n      return true;\n    };\n    var findPattern = function (patterns, text) {\n      var nuText = text.replace(nbsp, ' ');\n      return find(patterns, function (pattern) {\n        return text.indexOf(pattern.start) === 0 || nuText.indexOf(pattern.start) === 0;\n      });\n    };\n    var findPatterns = function (editor, patterns) {\n      var dom = editor.dom;\n      var rng = editor.selection.getRng();\n      return getParentBlock(editor, rng).filter(function (block) {\n        var forcedRootBlock = getForcedRootBlock(editor);\n        var matchesForcedRootBlock = forcedRootBlock === '' && dom.is(block, 'body') || dom.is(block, forcedRootBlock);\n        return block !== null && matchesForcedRootBlock;\n      }).bind(function (block) {\n        var blockText = block.textContent;\n        var matchedPattern = findPattern(patterns, blockText);\n        return matchedPattern.map(function (pattern) {\n          if (global$3.trim(blockText).length === pattern.start.length) {\n            return [];\n          }\n          return [{\n              pattern: pattern,\n              range: generatePathRange(dom.getRoot(), block, 0, block, 0)\n            }];\n        });\n      }).getOr([]);\n    };\n    var applyMatches = function (editor, matches) {\n      if (matches.length === 0) {\n        return;\n      }\n      var bookmark = editor.selection.getBookmark();\n      each(matches, function (match) {\n        return applyPattern(editor, match);\n      });\n      editor.selection.moveToBookmark(bookmark);\n    };\n\n    var unique = 0;\n    var generate$1 = function (prefix) {\n      var date = new Date();\n      var time = date.getTime();\n      var random = Math.floor(Math.random() * 1000000000);\n      unique++;\n      return prefix + '_' + random + unique + String(time);\n    };\n\n    var checkRange = function (str, substr, start) {\n      return substr === '' || str.length >= substr.length && str.substr(start, start + substr.length) === substr;\n    };\n    var endsWith = function (str, suffix) {\n      return checkRange(str, suffix, str.length - suffix.length);\n    };\n\n    var newMarker = function (dom, id) {\n      return dom.create('span', {\n        'data-mce-type': 'bookmark',\n        id: id\n      });\n    };\n    var rangeFromMarker = function (dom, marker) {\n      var rng = dom.createRng();\n      rng.setStartAfter(marker.start);\n      rng.setEndBefore(marker.end);\n      return rng;\n    };\n    var createMarker = function (dom, markerPrefix, pathRange) {\n      var rng = resolvePathRange(dom.getRoot(), pathRange).getOrDie('Unable to resolve path range');\n      var startNode = rng.startContainer;\n      var endNode = rng.endContainer;\n      var textEnd = rng.endOffset === 0 ? endNode : endNode.splitText(rng.endOffset);\n      var textStart = rng.startOffset === 0 ? startNode : startNode.splitText(rng.startOffset);\n      return {\n        prefix: markerPrefix,\n        end: textEnd.parentNode.insertBefore(newMarker(dom, markerPrefix + '-end'), textEnd),\n        start: textStart.parentNode.insertBefore(newMarker(dom, markerPrefix + '-start'), textStart)\n      };\n    };\n    var removeMarker = function (dom, marker, isRoot) {\n      cleanEmptyNodes(dom, dom.get(marker.prefix + '-end'), isRoot);\n      cleanEmptyNodes(dom, dom.get(marker.prefix + '-start'), isRoot);\n    };\n\n    var matchesPattern = function (dom, block, patternContent) {\n      return function (element, offset) {\n        var text = element.data;\n        var searchText = text.substring(0, offset);\n        var startEndIndex = searchText.lastIndexOf(patternContent.charAt(patternContent.length - 1));\n        var startIndex = searchText.lastIndexOf(patternContent);\n        if (startIndex !== -1) {\n          return startIndex + patternContent.length;\n        } else if (startEndIndex !== -1) {\n          return startEndIndex + 1;\n        } else {\n          return -1;\n        }\n      };\n    };\n    var findPatternStartFromSpot = function (dom, pattern, block, spot) {\n      var startPattern = pattern.start;\n      var startSpot = repeatLeft(dom, spot.container, spot.offset, matchesPattern(dom, block, startPattern), block);\n      return startSpot.bind(function (spot) {\n        if (spot.offset >= startPattern.length) {\n          var rng = dom.createRng();\n          rng.setStart(spot.container, spot.offset - startPattern.length);\n          rng.setEnd(spot.container, spot.offset);\n          return Optional.some(rng);\n        } else {\n          var offset = spot.offset - startPattern.length;\n          return scanLeft(spot.container, offset, block).map(function (nextSpot) {\n            var rng = dom.createRng();\n            rng.setStart(nextSpot.container, nextSpot.offset);\n            rng.setEnd(spot.container, spot.offset);\n            return rng;\n          }).filter(function (rng) {\n            return rng.toString() === startPattern;\n          }).orThunk(function () {\n            return findPatternStartFromSpot(dom, pattern, block, point(spot.container, 0));\n          });\n        }\n      });\n    };\n    var findPatternStart = function (dom, pattern, node, offset, block, requireGap) {\n      if (requireGap === void 0) {\n        requireGap = false;\n      }\n      if (pattern.start.length === 0 && !requireGap) {\n        var rng = dom.createRng();\n        rng.setStart(node, offset);\n        rng.setEnd(node, offset);\n        return Optional.some(rng);\n      }\n      return textBefore(node, offset, block).bind(function (spot) {\n        var start = findPatternStartFromSpot(dom, pattern, block, spot);\n        return start.bind(function (startRange) {\n          if (requireGap) {\n            if (startRange.endContainer === spot.container && startRange.endOffset === spot.offset) {\n              return Optional.none();\n            } else if (spot.offset === 0 && startRange.endContainer.textContent.length === startRange.endOffset) {\n              return Optional.none();\n            }\n          }\n          return Optional.some(startRange);\n        });\n      });\n    };\n    var findPattern$1 = function (editor, block, details) {\n      var dom = editor.dom;\n      var root = dom.getRoot();\n      var pattern = details.pattern;\n      var endNode = details.position.container;\n      var endOffset = details.position.offset;\n      return scanLeft(endNode, endOffset - details.pattern.end.length, block).bind(function (spot) {\n        var endPathRng = generatePathRange(root, spot.container, spot.offset, endNode, endOffset);\n        if (isReplacementPattern(pattern)) {\n          return Optional.some({\n            matches: [{\n                pattern: pattern,\n                startRng: endPathRng,\n                endRng: endPathRng\n              }],\n            position: spot\n          });\n        } else {\n          var resultsOpt = findPatternsRec(editor, details.remainingPatterns, spot.container, spot.offset, block);\n          var results_1 = resultsOpt.getOr({\n            matches: [],\n            position: spot\n          });\n          var pos = results_1.position;\n          var start = findPatternStart(dom, pattern, pos.container, pos.offset, block, resultsOpt.isNone());\n          return start.map(function (startRng) {\n            var startPathRng = generatePathRangeFromRange(root, startRng);\n            return {\n              matches: results_1.matches.concat([{\n                  pattern: pattern,\n                  startRng: startPathRng,\n                  endRng: endPathRng\n                }]),\n              position: point(startRng.startContainer, startRng.startOffset)\n            };\n          });\n        }\n      });\n    };\n    var findPatternsRec = function (editor, patterns, node, offset, block) {\n      var dom = editor.dom;\n      return textBefore(node, offset, dom.getRoot()).bind(function (endSpot) {\n        var rng = dom.createRng();\n        rng.setStart(block, 0);\n        rng.setEnd(node, offset);\n        var text = rng.toString();\n        for (var i = 0; i < patterns.length; i++) {\n          var pattern = patterns[i];\n          if (!endsWith(text, pattern.end)) {\n            continue;\n          }\n          var patternsWithoutCurrent = patterns.slice();\n          patternsWithoutCurrent.splice(i, 1);\n          var result = findPattern$1(editor, block, {\n            pattern: pattern,\n            remainingPatterns: patternsWithoutCurrent,\n            position: endSpot\n          });\n          if (result.isSome()) {\n            return result;\n          }\n        }\n        return Optional.none();\n      });\n    };\n    var applyPattern$1 = function (editor, pattern, patternRange) {\n      editor.selection.setRng(patternRange);\n      if (pattern.type === 'inline-format') {\n        each(pattern.format, function (format) {\n          editor.formatter.apply(format);\n        });\n      } else {\n        editor.execCommand(pattern.cmd, false, pattern.value);\n      }\n    };\n    var applyReplacementPattern = function (editor, pattern, marker, isRoot) {\n      var markerRange = rangeFromMarker(editor.dom, marker);\n      deleteRng(editor.dom, markerRange, isRoot);\n      applyPattern$1(editor, pattern, markerRange);\n    };\n    var applyPatternWithContent = function (editor, pattern, startMarker, endMarker, isRoot) {\n      var dom = editor.dom;\n      var markerEndRange = rangeFromMarker(dom, endMarker);\n      var markerStartRange = rangeFromMarker(dom, startMarker);\n      deleteRng(dom, markerStartRange, isRoot);\n      deleteRng(dom, markerEndRange, isRoot);\n      var patternMarker = {\n        prefix: startMarker.prefix,\n        start: startMarker.end,\n        end: endMarker.start\n      };\n      var patternRange = rangeFromMarker(dom, patternMarker);\n      applyPattern$1(editor, pattern, patternRange);\n    };\n    var addMarkers = function (dom, matches) {\n      var markerPrefix = generate$1('mce_textpattern');\n      var matchesWithEnds = foldr(matches, function (acc, match) {\n        var endMarker = createMarker(dom, markerPrefix + ('_end' + acc.length), match.endRng);\n        return acc.concat([__assign(__assign({}, match), { endMarker: endMarker })]);\n      }, []);\n      return foldr(matchesWithEnds, function (acc, match) {\n        var idx = matchesWithEnds.length - acc.length - 1;\n        var startMarker = isReplacementPattern(match.pattern) ? match.endMarker : createMarker(dom, markerPrefix + ('_start' + idx), match.startRng);\n        return acc.concat([__assign(__assign({}, match), { startMarker: startMarker })]);\n      }, []);\n    };\n    var findPatterns$1 = function (editor, patterns, space) {\n      var rng = editor.selection.getRng();\n      if (rng.collapsed === false) {\n        return [];\n      }\n      return getParentBlock(editor, rng).bind(function (block) {\n        var offset = rng.startOffset - (space ? 1 : 0);\n        return findPatternsRec(editor, patterns, rng.startContainer, offset, block);\n      }).fold(function () {\n        return [];\n      }, function (result) {\n        return result.matches;\n      });\n    };\n    var applyMatches$1 = function (editor, matches) {\n      if (matches.length === 0) {\n        return;\n      }\n      var dom = editor.dom;\n      var bookmark = editor.selection.getBookmark();\n      var matchesWithMarkers = addMarkers(dom, matches);\n      each(matchesWithMarkers, function (match) {\n        var block = dom.getParent(match.startMarker.start, dom.isBlock);\n        var isRoot = function (node) {\n          return node === block;\n        };\n        if (isReplacementPattern(match.pattern)) {\n          applyReplacementPattern(editor, match.pattern, match.endMarker, isRoot);\n        } else {\n          applyPatternWithContent(editor, match.pattern, match.startMarker, match.endMarker, isRoot);\n        }\n        removeMarker(dom, match.endMarker, isRoot);\n        removeMarker(dom, match.startMarker, isRoot);\n      });\n      editor.selection.moveToBookmark(bookmark);\n    };\n\n    var handleEnter = function (editor, patternSet) {\n      if (!editor.selection.isCollapsed()) {\n        return false;\n      }\n      var inlineMatches = findPatterns$1(editor, patternSet.inlinePatterns, false);\n      var blockMatches = findPatterns(editor, patternSet.blockPatterns);\n      if (blockMatches.length > 0 || inlineMatches.length > 0) {\n        editor.undoManager.add();\n        editor.undoManager.extra(function () {\n          editor.execCommand('mceInsertNewLine');\n        }, function () {\n          editor.insertContent(zeroWidth);\n          applyMatches$1(editor, inlineMatches);\n          applyMatches(editor, blockMatches);\n          var range = editor.selection.getRng();\n          var spot = textBefore(range.startContainer, range.startOffset, editor.dom.getRoot());\n          editor.execCommand('mceInsertNewLine');\n          spot.each(function (s) {\n            var node = s.container;\n            if (node.data.charAt(s.offset - 1) === zeroWidth) {\n              node.deleteData(s.offset - 1, 1);\n              cleanEmptyNodes(editor.dom, node.parentNode, function (e) {\n                return e === editor.dom.getRoot();\n              });\n            }\n          });\n        });\n        return true;\n      }\n      return false;\n    };\n    var handleInlineKey = function (editor, patternSet) {\n      var inlineMatches = findPatterns$1(editor, patternSet.inlinePatterns, true);\n      if (inlineMatches.length > 0) {\n        editor.undoManager.transact(function () {\n          applyMatches$1(editor, inlineMatches);\n        });\n      }\n    };\n    var checkKeyEvent = function (codes, event, predicate) {\n      for (var i = 0; i < codes.length; i++) {\n        if (predicate(codes[i], event)) {\n          return true;\n        }\n      }\n    };\n    var checkKeyCode = function (codes, event) {\n      return checkKeyEvent(codes, event, function (code, event) {\n        return code === event.keyCode && global$2.modifierPressed(event) === false;\n      });\n    };\n    var checkCharCode = function (chars, event) {\n      return checkKeyEvent(chars, event, function (chr, event) {\n        return chr.charCodeAt(0) === event.charCode;\n      });\n    };\n\n    var setup = function (editor, patternsState) {\n      var charCodes = [\n        ',',\n        '.',\n        ';',\n        ':',\n        '!',\n        '?'\n      ];\n      var keyCodes = [32];\n      editor.on('keydown', function (e) {\n        if (e.keyCode === 13 && !global$2.modifierPressed(e)) {\n          if (handleEnter(editor, patternsState.get())) {\n            e.preventDefault();\n          }\n        }\n      }, true);\n      editor.on('keyup', function (e) {\n        if (checkKeyCode(keyCodes, e)) {\n          handleInlineKey(editor, patternsState.get());\n        }\n      });\n      editor.on('keypress', function (e) {\n        if (checkCharCode(charCodes, e)) {\n          global$1.setEditorTimeout(editor, function () {\n            handleInlineKey(editor, patternsState.get());\n          });\n        }\n      });\n    };\n\n    function Plugin () {\n      global.add('textpattern', function (editor) {\n        var patternsState = Cell(getPatternSet(editor));\n        setup(editor, patternsState);\n        return get$1(patternsState);\n      });\n    }\n\n    Plugin();\n\n}());\n\n\n//# sourceURL=webpack:///./src/js/plugins/textpattern/plugin.js?")}});