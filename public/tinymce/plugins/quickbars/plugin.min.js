/*! 
* Copyright (c) Tiny Technologies, Inc. All rights reserved.
* Licensed under the LGPL or a commercial license.
* For LGPL see License.txt in the project root for license information.
* For commercial licenses see https://www.tiny.cloud/
* 
*  Version: 5.7.0 (2021-02-10)
*  */
!function(t){var o={};function r(n){if(o[n])return o[n].exports;var e=o[n]={i:n,l:!1,exports:{}};return t[n].call(e.exports,e,e.exports,r),e.l=!0,e.exports}r.m=t,r.c=o,r.d=function(n,e,t){r.o(n,e)||Object.defineProperty(n,e,{configurable:!1,enumerable:!0,get:t})},r.r=function(n){Object.defineProperty(n,"__esModule",{value:!0})},r.n=function(n){var e=n&&n.__esModule?function(){return n["default"]}:function(){return n};return r.d(e,"a",e),e},r.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},r.p="",r(r.s="./src/js/plugins/quickbars/plugin.js")}({"./src/js/plugins/quickbars/plugin.js":function(module,exports){eval("/**\n  * Copyright (c) Tiny Technologies, Inc. All rights reserved.\n  * Licensed under the LGPL or a commercial license.\n  * For LGPL see License.txt in the project root for license information.\n  * For commercial licenses see https://www.tiny.cloud/\n  *\n  * Version: 5.7.0 (2021-02-10)\n  */\n (function () {\n    'use strict';\n\n    var global = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    var unique = 0;\n    var generate = function (prefix) {\n      var date = new Date();\n      var time = date.getTime();\n      var random = Math.floor(Math.random() * 1000000000);\n      unique++;\n      return prefix + '_' + random + unique + String(time);\n    };\n\n    var createTableHtml = function (cols, rows) {\n      var x, y, html;\n      html = '<table data-mce-id=\"mce\" style=\"width: 100%\">';\n      html += '<tbody>';\n      for (y = 0; y < rows; y++) {\n        html += '<tr>';\n        for (x = 0; x < cols; x++) {\n          html += '<td><br></td>';\n        }\n        html += '</tr>';\n      }\n      html += '</tbody>';\n      html += '</table>';\n      return html;\n    };\n    var getInsertedElement = function (editor) {\n      var elms = editor.dom.select('*[data-mce-id]');\n      return elms[0];\n    };\n    var insertTableHtml = function (editor, cols, rows) {\n      editor.undoManager.transact(function () {\n        editor.insertContent(createTableHtml(cols, rows));\n        var tableElm = getInsertedElement(editor);\n        tableElm.removeAttribute('data-mce-id');\n        var cellElm = editor.dom.select('td,th', tableElm);\n        editor.selection.setCursorLocation(cellElm[0], 0);\n      });\n    };\n    var insertTable = function (editor, cols, rows) {\n      editor.plugins.table ? editor.plugins.table.insertTable(cols, rows) : insertTableHtml(editor, cols, rows);\n    };\n    var insertBlob = function (editor, base64, blob) {\n      var blobCache = editor.editorUpload.blobCache;\n      var blobInfo = blobCache.create(generate('mceu'), blob, base64);\n      blobCache.add(blobInfo);\n      editor.insertContent(editor.dom.createHTML('img', { src: blobInfo.blobUri() }));\n    };\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.util.Promise');\n\n    var blobToBase64 = function (blob) {\n      return new global$1(function (resolve) {\n        var reader = new FileReader();\n        reader.onloadend = function () {\n          resolve(reader.result.split(',')[1]);\n        };\n        reader.readAsDataURL(blob);\n      });\n    };\n\n    var global$2 = tinymce.util.Tools.resolve('tinymce.Env');\n\n    var global$3 = tinymce.util.Tools.resolve('tinymce.util.Delay');\n\n    var pickFile = function (editor) {\n      return new global$1(function (resolve) {\n        var fileInput = document.createElement('input');\n        fileInput.type = 'file';\n        fileInput.accept = 'image/*';\n        fileInput.style.position = 'fixed';\n        fileInput.style.left = '0';\n        fileInput.style.top = '0';\n        fileInput.style.opacity = '0.001';\n        document.body.appendChild(fileInput);\n        var changeHandler = function (e) {\n          resolve(Array.prototype.slice.call(e.target.files));\n        };\n        fileInput.addEventListener('change', changeHandler);\n        var cancelHandler = function (e) {\n          var cleanup = function () {\n            resolve([]);\n            fileInput.parentNode.removeChild(fileInput);\n          };\n          if (global$2.os.isAndroid() && e.type !== 'remove') {\n            global$3.setEditorTimeout(editor, cleanup, 0);\n          } else {\n            cleanup();\n          }\n          editor.off('focusin remove', cancelHandler);\n        };\n        editor.on('focusin remove', cancelHandler);\n        fileInput.click();\n      });\n    };\n\n    var setupButtons = function (editor) {\n      editor.ui.registry.addButton('quickimage', {\n        icon: 'image',\n        tooltip: 'Insert image',\n        onAction: function () {\n          pickFile(editor).then(function (files) {\n            if (files.length > 0) {\n              var blob_1 = files[0];\n              blobToBase64(blob_1).then(function (base64) {\n                insertBlob(editor, base64, blob_1);\n              });\n            }\n          });\n        }\n      });\n      editor.ui.registry.addButton('quicktable', {\n        icon: 'table',\n        tooltip: 'Insert table',\n        onAction: function () {\n          insertTable(editor, 2, 2);\n        }\n      });\n    };\n\n    var noop = function () {\n    };\n    var constant = function (value) {\n      return function () {\n        return value;\n      };\n    };\n    var never = constant(false);\n    var always = constant(true);\n\n    var none = function () {\n      return NONE;\n    };\n    var NONE = function () {\n      var eq = function (o) {\n        return o.isNone();\n      };\n      var call = function (thunk) {\n        return thunk();\n      };\n      var id = function (n) {\n        return n;\n      };\n      var me = {\n        fold: function (n, _s) {\n          return n();\n        },\n        is: never,\n        isSome: never,\n        isNone: always,\n        getOr: id,\n        getOrThunk: call,\n        getOrDie: function (msg) {\n          throw new Error(msg || 'error: getOrDie called on none.');\n        },\n        getOrNull: constant(null),\n        getOrUndefined: constant(undefined),\n        or: id,\n        orThunk: call,\n        map: none,\n        each: noop,\n        bind: none,\n        exists: never,\n        forall: always,\n        filter: none,\n        equals: eq,\n        equals_: eq,\n        toArray: function () {\n          return [];\n        },\n        toString: constant('none()')\n      };\n      return me;\n    }();\n    var some = function (a) {\n      var constant_a = constant(a);\n      var self = function () {\n        return me;\n      };\n      var bind = function (f) {\n        return f(a);\n      };\n      var me = {\n        fold: function (n, s) {\n          return s(a);\n        },\n        is: function (v) {\n          return a === v;\n        },\n        isSome: always,\n        isNone: never,\n        getOr: constant_a,\n        getOrThunk: constant_a,\n        getOrDie: constant_a,\n        getOrNull: constant_a,\n        getOrUndefined: constant_a,\n        or: self,\n        orThunk: self,\n        map: function (f) {\n          return some(f(a));\n        },\n        each: function (f) {\n          f(a);\n        },\n        bind: bind,\n        exists: bind,\n        forall: bind,\n        filter: function (f) {\n          return f(a) ? me : NONE;\n        },\n        toArray: function () {\n          return [a];\n        },\n        toString: function () {\n          return 'some(' + a + ')';\n        },\n        equals: function (o) {\n          return o.is(a);\n        },\n        equals_: function (o, elementEq) {\n          return o.fold(never, function (b) {\n            return elementEq(a, b);\n          });\n        }\n      };\n      return me;\n    };\n    var from = function (value) {\n      return value === null || value === undefined ? NONE : some(value);\n    };\n    var Optional = {\n      some: some,\n      none: none,\n      from: from\n    };\n\n    var typeOf = function (x) {\n      var t = typeof x;\n      if (x === null) {\n        return 'null';\n      } else if (t === 'object' && (Array.prototype.isPrototypeOf(x) || x.constructor && x.constructor.name === 'Array')) {\n        return 'array';\n      } else if (t === 'object' && (String.prototype.isPrototypeOf(x) || x.constructor && x.constructor.name === 'String')) {\n        return 'string';\n      } else {\n        return t;\n      }\n    };\n    var isType = function (type) {\n      return function (value) {\n        return typeOf(value) === type;\n      };\n    };\n    var isSimpleType = function (type) {\n      return function (value) {\n        return typeof value === type;\n      };\n    };\n    var eq = function (t) {\n      return function (a) {\n        return t === a;\n      };\n    };\n    var isString = isType('string');\n    var isObject = isType('object');\n    var isArray = isType('array');\n    var isBoolean = isSimpleType('boolean');\n    var isUndefined = eq(undefined);\n    var isFunction = isSimpleType('function');\n\n    function ClosestOrAncestor (is, ancestor, scope, a, isRoot) {\n      if (is(scope, a)) {\n        return Optional.some(scope);\n      } else if (isFunction(isRoot) && isRoot(scope)) {\n        return Optional.none();\n      } else {\n        return ancestor(scope, a, isRoot);\n      }\n    }\n\n    var ELEMENT = 1;\n\n    var fromHtml = function (html, scope) {\n      var doc = scope || document;\n      var div = doc.createElement('div');\n      div.innerHTML = html;\n      if (!div.hasChildNodes() || div.childNodes.length > 1) {\n        console.error('HTML does not have a single root node', html);\n        throw new Error('HTML must have a single root node');\n      }\n      return fromDom(div.childNodes[0]);\n    };\n    var fromTag = function (tag, scope) {\n      var doc = scope || document;\n      var node = doc.createElement(tag);\n      return fromDom(node);\n    };\n    var fromText = function (text, scope) {\n      var doc = scope || document;\n      var node = doc.createTextNode(text);\n      return fromDom(node);\n    };\n    var fromDom = function (node) {\n      if (node === null || node === undefined) {\n        throw new Error('Node cannot be null or undefined');\n      }\n      return { dom: node };\n    };\n    var fromPoint = function (docElm, x, y) {\n      return Optional.from(docElm.dom.elementFromPoint(x, y)).map(fromDom);\n    };\n    var SugarElement = {\n      fromHtml: fromHtml,\n      fromTag: fromTag,\n      fromText: fromText,\n      fromDom: fromDom,\n      fromPoint: fromPoint\n    };\n\n    var is = function (element, selector) {\n      var dom = element.dom;\n      if (dom.nodeType !== ELEMENT) {\n        return false;\n      } else {\n        var elem = dom;\n        if (elem.matches !== undefined) {\n          return elem.matches(selector);\n        } else if (elem.msMatchesSelector !== undefined) {\n          return elem.msMatchesSelector(selector);\n        } else if (elem.webkitMatchesSelector !== undefined) {\n          return elem.webkitMatchesSelector(selector);\n        } else if (elem.mozMatchesSelector !== undefined) {\n          return elem.mozMatchesSelector(selector);\n        } else {\n          throw new Error('Browser lacks native selectors');\n        }\n      }\n    };\n\n    var Global = typeof window !== 'undefined' ? window : Function('return this;')();\n\n    var name = function (element) {\n      var r = element.dom.nodeName;\n      return r.toLowerCase();\n    };\n\n    var ancestor = function (scope, predicate, isRoot) {\n      var element = scope.dom;\n      var stop = isFunction(isRoot) ? isRoot : never;\n      while (element.parentNode) {\n        element = element.parentNode;\n        var el = SugarElement.fromDom(element);\n        if (predicate(el)) {\n          return Optional.some(el);\n        } else if (stop(el)) {\n          break;\n        }\n      }\n      return Optional.none();\n    };\n    var closest = function (scope, predicate, isRoot) {\n      var is = function (s, test) {\n        return test(s);\n      };\n      return ClosestOrAncestor(is, ancestor, scope, predicate, isRoot);\n    };\n\n    var ancestor$1 = function (scope, selector, isRoot) {\n      return ancestor(scope, function (e) {\n        return is(e, selector);\n      }, isRoot);\n    };\n    var closest$1 = function (scope, selector, isRoot) {\n      var is$1 = function (element, selector) {\n        return is(element, selector);\n      };\n      return ClosestOrAncestor(is$1, ancestor$1, scope, selector, isRoot);\n    };\n\n    var validDefaultOrDie = function (value, predicate) {\n      if (predicate(value)) {\n        return true;\n      }\n      throw new Error('Default value doesn\\'t match requested type.');\n    };\n    var items = function (value, defaultValue) {\n      if (isArray(value) || isObject(value)) {\n        throw new Error('expected a string but found: ' + value);\n      }\n      if (isUndefined(value)) {\n        return defaultValue;\n      }\n      if (isBoolean(value)) {\n        return value === false ? '' : defaultValue;\n      }\n      return value;\n    };\n    var getToolbarItemsOr_ = function (predicate) {\n      return function (editor, name, defaultValue) {\n        validDefaultOrDie(defaultValue, predicate);\n        var value = editor.getParam(name, defaultValue);\n        return items(value, defaultValue);\n      };\n    };\n    var getToolbarItemsOr = getToolbarItemsOr_(isString);\n\n    var getTextSelectionToolbarItems = function (editor) {\n      return getToolbarItemsOr(editor, 'quickbars_selection_toolbar', 'bold italic | quicklink h2 h3 blockquote');\n    };\n    var getInsertToolbarItems = function (editor) {\n      return getToolbarItemsOr(editor, 'quickbars_insert_toolbar', 'quickimage quicktable');\n    };\n    var getImageToolbarItems = function (editor) {\n      return getToolbarItemsOr(editor, 'quickbars_image_toolbar', 'alignleft aligncenter alignright');\n    };\n\n    var addToEditor = function (editor) {\n      var insertToolbarItems = getInsertToolbarItems(editor);\n      if (insertToolbarItems.trim().length > 0) {\n        editor.ui.registry.addContextToolbar('quickblock', {\n          predicate: function (node) {\n            var sugarNode = SugarElement.fromDom(node);\n            var textBlockElementsMap = editor.schema.getTextBlockElements();\n            var isRoot = function (elem) {\n              return elem.dom === editor.getBody();\n            };\n            return closest$1(sugarNode, 'table', isRoot).fold(function () {\n              return closest(sugarNode, function (elem) {\n                return name(elem) in textBlockElementsMap && editor.dom.isEmpty(elem.dom);\n              }, isRoot).isSome();\n            }, never);\n          },\n          items: insertToolbarItems,\n          position: 'line',\n          scope: 'editor'\n        });\n      }\n    };\n\n    var addToEditor$1 = function (editor) {\n      var isEditable = function (node) {\n        return editor.dom.getContentEditableParent(node) !== 'false';\n      };\n      var isImage = function (node) {\n        return node.nodeName === 'IMG' || node.nodeName === 'FIGURE' && /image/i.test(node.className);\n      };\n      var imageToolbarItems = getImageToolbarItems(editor);\n      if (imageToolbarItems.trim().length > 0) {\n        editor.ui.registry.addContextToolbar('imageselection', {\n          predicate: isImage,\n          items: imageToolbarItems,\n          position: 'node'\n        });\n      }\n      var textToolbarItems = getTextSelectionToolbarItems(editor);\n      if (textToolbarItems.trim().length > 0) {\n        editor.ui.registry.addContextToolbar('textselection', {\n          predicate: function (node) {\n            return !isImage(node) && !editor.selection.isCollapsed() && isEditable(node);\n          },\n          items: textToolbarItems,\n          position: 'selection',\n          scope: 'editor'\n        });\n      }\n    };\n\n    function Plugin () {\n      global.add('quickbars', function (editor) {\n        setupButtons(editor);\n        addToEditor(editor);\n        addToEditor$1(editor);\n      });\n    }\n\n    Plugin();\n\n}());\n\n\n//# sourceURL=webpack:///./src/js/plugins/quickbars/plugin.js?")}});