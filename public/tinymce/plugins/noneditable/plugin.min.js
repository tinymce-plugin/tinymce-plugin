/*! 
* Copyright (c) Tiny Technologies, Inc. All rights reserved.
* Licensed under the LGPL or a commercial license.
* For LGPL see License.txt in the project root for license information.
* For commercial licenses see https://www.tiny.cloud/
* 
*  Version: 5.7.0 (2021-02-10)
*  */
!function(t){var o={};function a(n){if(o[n])return o[n].exports;var e=o[n]={i:n,l:!1,exports:{}};return t[n].call(e.exports,e,e.exports,a),e.l=!0,e.exports}a.m=t,a.c=o,a.d=function(n,e,t){a.o(n,e)||Object.defineProperty(n,e,{configurable:!1,enumerable:!0,get:t})},a.r=function(n){Object.defineProperty(n,"__esModule",{value:!0})},a.n=function(n){var e=n&&n.__esModule?function(){return n["default"]}:function(){return n};return a.d(e,"a",e),e},a.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},a.p="",a(a.s="./src/js/plugins/noneditable/plugin.js")}({"./src/js/plugins/noneditable/plugin.js":function(module,exports){eval("/**\n  * Copyright (c) Tiny Technologies, Inc. All rights reserved.\n  * Licensed under the LGPL or a commercial license.\n  * For LGPL see License.txt in the project root for license information.\n  * For commercial licenses see https://www.tiny.cloud/\n  *\n  * Version: 5.7.0 (2021-02-10)\n  */\n (function () {\n    'use strict';\n\n    var global = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.util.Tools');\n\n    var getNonEditableClass = function (editor) {\n      return editor.getParam('noneditable_noneditable_class', 'mceNonEditable');\n    };\n    var getEditableClass = function (editor) {\n      return editor.getParam('noneditable_editable_class', 'mceEditable');\n    };\n    var getNonEditableRegExps = function (editor) {\n      var nonEditableRegExps = editor.getParam('noneditable_regexp', []);\n      if (nonEditableRegExps && nonEditableRegExps.constructor === RegExp) {\n        return [nonEditableRegExps];\n      } else {\n        return nonEditableRegExps;\n      }\n    };\n\n    var hasClass = function (checkClassName) {\n      return function (node) {\n        return (' ' + node.attr('class') + ' ').indexOf(checkClassName) !== -1;\n      };\n    };\n    var replaceMatchWithSpan = function (editor, content, cls) {\n      return function (match) {\n        var args = arguments, index = args[args.length - 2];\n        var prevChar = index > 0 ? content.charAt(index - 1) : '';\n        if (prevChar === '\"') {\n          return match;\n        }\n        if (prevChar === '>') {\n          var findStartTagIndex = content.lastIndexOf('<', index);\n          if (findStartTagIndex !== -1) {\n            var tagHtml = content.substring(findStartTagIndex, index);\n            if (tagHtml.indexOf('contenteditable=\"false\"') !== -1) {\n              return match;\n            }\n          }\n        }\n        return '<span class=\"' + cls + '\" data-mce-content=\"' + editor.dom.encode(args[0]) + '\">' + editor.dom.encode(typeof args[1] === 'string' ? args[1] : args[0]) + '</span>';\n      };\n    };\n    var convertRegExpsToNonEditable = function (editor, nonEditableRegExps, e) {\n      var i = nonEditableRegExps.length, content = e.content;\n      if (e.format === 'raw') {\n        return;\n      }\n      while (i--) {\n        content = content.replace(nonEditableRegExps[i], replaceMatchWithSpan(editor, content, getNonEditableClass(editor)));\n      }\n      e.content = content;\n    };\n    var setup = function (editor) {\n      var contentEditableAttrName = 'contenteditable';\n      var editClass = ' ' + global$1.trim(getEditableClass(editor)) + ' ';\n      var nonEditClass = ' ' + global$1.trim(getNonEditableClass(editor)) + ' ';\n      var hasEditClass = hasClass(editClass);\n      var hasNonEditClass = hasClass(nonEditClass);\n      var nonEditableRegExps = getNonEditableRegExps(editor);\n      editor.on('PreInit', function () {\n        if (nonEditableRegExps.length > 0) {\n          editor.on('BeforeSetContent', function (e) {\n            convertRegExpsToNonEditable(editor, nonEditableRegExps, e);\n          });\n        }\n        editor.parser.addAttributeFilter('class', function (nodes) {\n          var i = nodes.length, node;\n          while (i--) {\n            node = nodes[i];\n            if (hasEditClass(node)) {\n              node.attr(contentEditableAttrName, 'true');\n            } else if (hasNonEditClass(node)) {\n              node.attr(contentEditableAttrName, 'false');\n            }\n          }\n        });\n        editor.serializer.addAttributeFilter(contentEditableAttrName, function (nodes) {\n          var i = nodes.length, node;\n          while (i--) {\n            node = nodes[i];\n            if (!hasEditClass(node) && !hasNonEditClass(node)) {\n              continue;\n            }\n            if (nonEditableRegExps.length > 0 && node.attr('data-mce-content')) {\n              node.name = '#text';\n              node.type = 3;\n              node.raw = true;\n              node.value = node.attr('data-mce-content');\n            } else {\n              node.attr(contentEditableAttrName, null);\n            }\n          }\n        });\n      });\n    };\n\n    function Plugin () {\n      global.add('noneditable', function (editor) {\n        setup(editor);\n      });\n    }\n\n    Plugin();\n\n}());\n\n\n//# sourceURL=webpack:///./src/js/plugins/noneditable/plugin.js?")}});