/*! 
* Copyright (c) Tiny Technologies, Inc. All rights reserved.
* Licensed under the LGPL or a commercial license.
* For LGPL see License.txt in the project root for license information.
* For commercial licenses see https://www.tiny.cloud/
* 
*  Version: 5.7.0 (2021-02-10)
*  */
!function(t){var i={};function l(n){if(i[n])return i[n].exports;var e=i[n]={i:n,l:!1,exports:{}};return t[n].call(e.exports,e,e.exports,l),e.l=!0,e.exports}l.m=t,l.c=i,l.d=function(n,e,t){l.o(n,e)||Object.defineProperty(n,e,{configurable:!1,enumerable:!0,get:t})},l.r=function(n){Object.defineProperty(n,"__esModule",{value:!0})},l.n=function(n){var e=n&&n.__esModule?function(){return n["default"]}:function(){return n};return l.d(e,"a",e),e},l.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},l.p="",l(l.s="./src/js/plugins/tabfocus/plugin.js")}({"./src/js/plugins/tabfocus/plugin.js":function(module,exports){eval("/**\n  * Copyright (c) Tiny Technologies, Inc. All rights reserved.\n  * Licensed under the LGPL or a commercial license.\n  * For LGPL see License.txt in the project root for license information.\n  * For commercial licenses see https://www.tiny.cloud/\n  *\n  * Version: 5.7.0 (2021-02-10)\n  */\n (function () {\n    'use strict';\n\n    var global = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.dom.DOMUtils');\n\n    var global$2 = tinymce.util.Tools.resolve('tinymce.EditorManager');\n\n    var global$3 = tinymce.util.Tools.resolve('tinymce.Env');\n\n    var global$4 = tinymce.util.Tools.resolve('tinymce.util.Delay');\n\n    var global$5 = tinymce.util.Tools.resolve('tinymce.util.Tools');\n\n    var global$6 = tinymce.util.Tools.resolve('tinymce.util.VK');\n\n    var getTabFocusElements = function (editor) {\n      return editor.getParam('tabfocus_elements', ':prev,:next');\n    };\n    var getTabFocus = function (editor) {\n      return editor.getParam('tab_focus', getTabFocusElements(editor));\n    };\n\n    var DOM = global$1.DOM;\n    var tabCancel = function (e) {\n      if (e.keyCode === global$6.TAB && !e.ctrlKey && !e.altKey && !e.metaKey) {\n        e.preventDefault();\n      }\n    };\n    var setup = function (editor) {\n      var tabHandler = function (e) {\n        var x, i;\n        if (e.keyCode !== global$6.TAB || e.ctrlKey || e.altKey || e.metaKey || e.isDefaultPrevented()) {\n          return;\n        }\n        var find = function (direction) {\n          var el = DOM.select(':input:enabled,*[tabindex]:not(iframe)');\n          var canSelectRecursive = function (e) {\n            return e.nodeName === 'BODY' || e.type !== 'hidden' && e.style.display !== 'none' && e.style.visibility !== 'hidden' && canSelectRecursive(e.parentNode);\n          };\n          var canSelect = function (el) {\n            return /INPUT|TEXTAREA|BUTTON/.test(el.tagName) && global$2.get(e.id) && el.tabIndex !== -1 && canSelectRecursive(el);\n          };\n          global$5.each(el, function (e, i) {\n            if (e.id === editor.id) {\n              x = i;\n              return false;\n            }\n          });\n          if (direction > 0) {\n            for (i = x + 1; i < el.length; i++) {\n              if (canSelect(el[i])) {\n                return el[i];\n              }\n            }\n          } else {\n            for (i = x - 1; i >= 0; i--) {\n              if (canSelect(el[i])) {\n                return el[i];\n              }\n            }\n          }\n          return null;\n        };\n        var v = global$5.explode(getTabFocus(editor));\n        if (v.length === 1) {\n          v[1] = v[0];\n          v[0] = ':prev';\n        }\n        var el;\n        if (e.shiftKey) {\n          if (v[0] === ':prev') {\n            el = find(-1);\n          } else {\n            el = DOM.get(v[0]);\n          }\n        } else {\n          if (v[1] === ':next') {\n            el = find(1);\n          } else {\n            el = DOM.get(v[1]);\n          }\n        }\n        if (el) {\n          var focusEditor = global$2.get(el.id || el.name);\n          if (el.id && focusEditor) {\n            focusEditor.focus();\n          } else {\n            global$4.setTimeout(function () {\n              if (!global$3.webkit) {\n                window.focus();\n              }\n              el.focus();\n            }, 10);\n          }\n          e.preventDefault();\n        }\n      };\n      editor.on('init', function () {\n        if (editor.inline) {\n          DOM.setAttrib(editor.getBody(), 'tabIndex', null);\n        }\n        editor.on('keyup', tabCancel);\n        if (global$3.gecko) {\n          editor.on('keypress keydown', tabHandler);\n        } else {\n          editor.on('keydown', tabHandler);\n        }\n      });\n    };\n\n    function Plugin () {\n      global.add('tabfocus', function (editor) {\n        setup(editor);\n      });\n    }\n\n    Plugin();\n\n}());\n\n\n//# sourceURL=webpack:///./src/js/plugins/tabfocus/plugin.js?")}});