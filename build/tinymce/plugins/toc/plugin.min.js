/*! 
* Copyright (c) Tiny Technologies, Inc. All rights reserved.
* Licensed under the LGPL or a commercial license.
* For LGPL see License.txt in the project root for license information.
* For commercial licenses see https://www.tiny.cloud/
* 
*  Version: 5.7.0 (2021-02-10)
*  */
!function(t){var o={};function r(e){if(o[e])return o[e].exports;var n=o[e]={i:e,l:!1,exports:{}};return t[e].call(n.exports,n,n.exports,r),n.l=!0,n.exports}r.m=t,r.c=o,r.d=function(e,n,t){r.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:t})},r.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},r.n=function(e){var n=e&&e.__esModule?function(){return e["default"]}:function(){return e};return r.d(n,"a",n),n},r.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},r.p="",r(r.s="./src/js/plugins/toc/plugin.js")}({"./src/js/plugins/toc/plugin.js":function(module,exports){eval("/**\n  * Copyright (c) Tiny Technologies, Inc. All rights reserved.\n  * Licensed under the LGPL or a commercial license.\n  * For LGPL see License.txt in the project root for license information.\n  * For commercial licenses see https://www.tiny.cloud/\n  *\n  * Version: 5.7.0 (2021-02-10)\n  */\n (function () {\n    'use strict';\n\n    var global = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.dom.DOMUtils');\n\n    var global$2 = tinymce.util.Tools.resolve('tinymce.util.I18n');\n\n    var global$3 = tinymce.util.Tools.resolve('tinymce.util.Tools');\n\n    var getTocClass = function (editor) {\n      return editor.getParam('toc_class', 'mce-toc');\n    };\n    var getTocHeader = function (editor) {\n      var tagName = editor.getParam('toc_header', 'h2');\n      return /^h[1-6]$/.test(tagName) ? tagName : 'h2';\n    };\n    var getTocDepth = function (editor) {\n      var depth = parseInt(editor.getParam('toc_depth', '3'), 10);\n      return depth >= 1 && depth <= 9 ? depth : 3;\n    };\n\n    var create = function (prefix) {\n      var counter = 0;\n      return function () {\n        var guid = new Date().getTime().toString(32);\n        return prefix + guid + (counter++).toString(32);\n      };\n    };\n\n    var tocId = create('mcetoc_');\n    var generateSelector = function (depth) {\n      var i;\n      var selector = [];\n      for (i = 1; i <= depth; i++) {\n        selector.push('h' + i);\n      }\n      return selector.join(',');\n    };\n    var hasHeaders = function (editor) {\n      return readHeaders(editor).length > 0;\n    };\n    var readHeaders = function (editor) {\n      var tocClass = getTocClass(editor);\n      var headerTag = getTocHeader(editor);\n      var selector = generateSelector(getTocDepth(editor));\n      var headers = editor.$(selector);\n      if (headers.length && /^h[1-9]$/i.test(headerTag)) {\n        headers = headers.filter(function (i, el) {\n          return !editor.dom.hasClass(el.parentNode, tocClass);\n        });\n      }\n      return global$3.map(headers, function (h) {\n        var id = h.id;\n        return {\n          id: id ? id : tocId(),\n          level: parseInt(h.nodeName.replace(/^H/i, ''), 10),\n          title: editor.$.text(h),\n          element: h\n        };\n      });\n    };\n    var getMinLevel = function (headers) {\n      var i, minLevel = 9;\n      for (i = 0; i < headers.length; i++) {\n        if (headers[i].level < minLevel) {\n          minLevel = headers[i].level;\n        }\n        if (minLevel === 1) {\n          return minLevel;\n        }\n      }\n      return minLevel;\n    };\n    var generateTitle = function (tag, title) {\n      var openTag = '<' + tag + ' contenteditable=\"true\">';\n      var closeTag = '</' + tag + '>';\n      return openTag + global$1.DOM.encode(title) + closeTag;\n    };\n    var generateTocHtml = function (editor) {\n      var html = generateTocContentHtml(editor);\n      return '<div class=\"' + editor.dom.encode(getTocClass(editor)) + '\" contenteditable=\"false\">' + html + '</div>';\n    };\n    var generateTocContentHtml = function (editor) {\n      var html = '';\n      var headers = readHeaders(editor);\n      var prevLevel = getMinLevel(headers) - 1;\n      var i, ii, h, nextLevel;\n      if (!headers.length) {\n        return '';\n      }\n      html += generateTitle(getTocHeader(editor), global$2.translate('Table of Contents'));\n      for (i = 0; i < headers.length; i++) {\n        h = headers[i];\n        h.element.id = h.id;\n        nextLevel = headers[i + 1] && headers[i + 1].level;\n        if (prevLevel === h.level) {\n          html += '<li>';\n        } else {\n          for (ii = prevLevel; ii < h.level; ii++) {\n            html += '<ul><li>';\n          }\n        }\n        html += '<a href=\"#' + h.id + '\">' + h.title + '</a>';\n        if (nextLevel === h.level || !nextLevel) {\n          html += '</li>';\n          if (!nextLevel) {\n            html += '</ul>';\n          }\n        } else {\n          for (ii = h.level; ii > nextLevel; ii--) {\n            html += '</li></ul><li>';\n          }\n        }\n        prevLevel = h.level;\n      }\n      return html;\n    };\n    var isEmptyOrOffscren = function (editor, nodes) {\n      return !nodes.length || editor.dom.getParents(nodes[0], '.mce-offscreen-selection').length > 0;\n    };\n    var insertToc = function (editor) {\n      var tocClass = getTocClass(editor);\n      var $tocElm = editor.$('.' + tocClass);\n      if (isEmptyOrOffscren(editor, $tocElm)) {\n        editor.insertContent(generateTocHtml(editor));\n      } else {\n        updateToc(editor);\n      }\n    };\n    var updateToc = function (editor) {\n      var tocClass = getTocClass(editor);\n      var $tocElm = editor.$('.' + tocClass);\n      if ($tocElm.length) {\n        editor.undoManager.transact(function () {\n          $tocElm.html(generateTocContentHtml(editor));\n        });\n      }\n    };\n\n    var register = function (editor) {\n      editor.addCommand('mceInsertToc', function () {\n        insertToc(editor);\n      });\n      editor.addCommand('mceUpdateToc', function () {\n        updateToc(editor);\n      });\n    };\n\n    var setup = function (editor) {\n      var $ = editor.$, tocClass = getTocClass(editor);\n      editor.on('PreProcess', function (e) {\n        var $tocElm = $('.' + tocClass, e.node);\n        if ($tocElm.length) {\n          $tocElm.removeAttr('contentEditable');\n          $tocElm.find('[contenteditable]').removeAttr('contentEditable');\n        }\n      });\n      editor.on('SetContent', function () {\n        var $tocElm = $('.' + tocClass);\n        if ($tocElm.length) {\n          $tocElm.attr('contentEditable', false);\n          $tocElm.children(':first-child').attr('contentEditable', true);\n        }\n      });\n    };\n\n    var toggleState = function (editor) {\n      return function (api) {\n        var toggleDisabledState = function () {\n          return api.setDisabled(editor.mode.isReadOnly() || !hasHeaders(editor));\n        };\n        toggleDisabledState();\n        editor.on('LoadContent SetContent change', toggleDisabledState);\n        return function () {\n          return editor.on('LoadContent SetContent change', toggleDisabledState);\n        };\n      };\n    };\n    var isToc = function (editor) {\n      return function (elm) {\n        return elm && editor.dom.is(elm, '.' + getTocClass(editor)) && editor.getBody().contains(elm);\n      };\n    };\n    var register$1 = function (editor) {\n      editor.ui.registry.addButton('toc', {\n        icon: 'toc',\n        tooltip: 'Table of contents',\n        onAction: function () {\n          return editor.execCommand('mceInsertToc');\n        },\n        onSetup: toggleState(editor)\n      });\n      editor.ui.registry.addButton('tocupdate', {\n        icon: 'reload',\n        tooltip: 'Update',\n        onAction: function () {\n          return editor.execCommand('mceUpdateToc');\n        }\n      });\n      editor.ui.registry.addMenuItem('toc', {\n        icon: 'toc',\n        text: 'Table of contents',\n        onAction: function () {\n          return editor.execCommand('mceInsertToc');\n        },\n        onSetup: toggleState(editor)\n      });\n      editor.ui.registry.addContextToolbar('toc', {\n        items: 'tocupdate',\n        predicate: isToc(editor),\n        scope: 'node',\n        position: 'node'\n      });\n    };\n\n    function Plugin () {\n      global.add('toc', function (editor) {\n        register(editor);\n        register$1(editor);\n        setup(editor);\n      });\n    }\n\n    Plugin();\n\n}());\n\n\n//# sourceURL=webpack:///./src/js/plugins/toc/plugin.js?")}});