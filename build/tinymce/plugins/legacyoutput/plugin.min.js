/*! 
* Copyright (c) Tiny Technologies, Inc. All rights reserved.
* Licensed under the LGPL or a commercial license.
* For LGPL see License.txt in the project root for license information.
* For commercial licenses see https://www.tiny.cloud/
* 
*  Version: 5.7.0 (2021-02-10)
*  */
!function(t){var i={};function r(n){if(i[n])return i[n].exports;var e=i[n]={i:n,l:!1,exports:{}};return t[n].call(e.exports,e,e.exports,r),e.l=!0,e.exports}r.m=t,r.c=i,r.d=function(n,e,t){r.o(n,e)||Object.defineProperty(n,e,{configurable:!1,enumerable:!0,get:t})},r.r=function(n){Object.defineProperty(n,"__esModule",{value:!0})},r.n=function(n){var e=n&&n.__esModule?function(){return n["default"]}:function(){return n};return r.d(e,"a",e),e},r.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},r.p="",r(r.s="./src/js/plugins/legacyoutput/plugin.js")}({"./src/js/plugins/legacyoutput/plugin.js":function(module,exports){eval("/**\n  * Copyright (c) Tiny Technologies, Inc. All rights reserved.\n  * Licensed under the LGPL or a commercial license.\n  * For LGPL see License.txt in the project root for license information.\n  * For commercial licenses see https://www.tiny.cloud/\n  *\n  * Version: 5.7.0 (2021-02-10)\n  */\n (function () {\n    'use strict';\n\n    var global = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.util.Tools');\n\n    var getFontSizeFormats = function (editor) {\n      return editor.getParam('fontsize_formats');\n    };\n    var setFontSizeFormats = function (editor, fontsize_formats) {\n      editor.settings.fontsize_formats = fontsize_formats;\n    };\n    var getFontFormats = function (editor) {\n      return editor.getParam('font_formats');\n    };\n    var setFontFormats = function (editor, font_formats) {\n      editor.settings.font_formats = font_formats;\n    };\n    var getFontSizeStyleValues = function (editor) {\n      return editor.getParam('font_size_style_values', 'xx-small,x-small,small,medium,large,x-large,xx-large');\n    };\n    var setInlineStyles = function (editor, inline_styles) {\n      editor.settings.inline_styles = inline_styles;\n    };\n\n    var overrideFormats = function (editor) {\n      var alignElements = 'p,h1,h2,h3,h4,h5,h6,td,th,div,ul,ol,li,table', fontSizes = global$1.explode(getFontSizeStyleValues(editor)), schema = editor.schema;\n      editor.formatter.register({\n        alignleft: {\n          selector: alignElements,\n          attributes: { align: 'left' }\n        },\n        aligncenter: {\n          selector: alignElements,\n          attributes: { align: 'center' }\n        },\n        alignright: {\n          selector: alignElements,\n          attributes: { align: 'right' }\n        },\n        alignjustify: {\n          selector: alignElements,\n          attributes: { align: 'justify' }\n        },\n        bold: [\n          {\n            inline: 'b',\n            remove: 'all',\n            preserve_attributes: [\n              'class',\n              'style'\n            ]\n          },\n          {\n            inline: 'strong',\n            remove: 'all',\n            preserve_attributes: [\n              'class',\n              'style'\n            ]\n          },\n          {\n            inline: 'span',\n            styles: { fontWeight: 'bold' }\n          }\n        ],\n        italic: [\n          {\n            inline: 'i',\n            remove: 'all',\n            preserve_attributes: [\n              'class',\n              'style'\n            ]\n          },\n          {\n            inline: 'em',\n            remove: 'all',\n            preserve_attributes: [\n              'class',\n              'style'\n            ]\n          },\n          {\n            inline: 'span',\n            styles: { fontStyle: 'italic' }\n          }\n        ],\n        underline: [\n          {\n            inline: 'u',\n            remove: 'all',\n            preserve_attributes: [\n              'class',\n              'style'\n            ]\n          },\n          {\n            inline: 'span',\n            styles: { textDecoration: 'underline' },\n            exact: true\n          }\n        ],\n        strikethrough: [\n          {\n            inline: 'strike',\n            remove: 'all',\n            preserve_attributes: [\n              'class',\n              'style'\n            ]\n          },\n          {\n            inline: 'span',\n            styles: { textDecoration: 'line-through' },\n            exact: true\n          }\n        ],\n        fontname: {\n          inline: 'font',\n          toggle: false,\n          attributes: { face: '%value' }\n        },\n        fontsize: {\n          inline: 'font',\n          toggle: false,\n          attributes: {\n            size: function (vars) {\n              return String(global$1.inArray(fontSizes, vars.value) + 1);\n            }\n          }\n        },\n        forecolor: {\n          inline: 'font',\n          attributes: { color: '%value' },\n          links: true,\n          remove_similar: true,\n          clear_child_styles: true\n        },\n        hilitecolor: {\n          inline: 'font',\n          styles: { backgroundColor: '%value' },\n          links: true,\n          remove_similar: true,\n          clear_child_styles: true\n        }\n      });\n      global$1.each('b,i,u,strike'.split(','), function (name) {\n        schema.addValidElements(name + '[*]');\n      });\n      if (!schema.getElementRule('font')) {\n        schema.addValidElements('font[face|size|color|style]');\n      }\n      global$1.each(alignElements.split(','), function (name) {\n        var rule = schema.getElementRule(name);\n        if (rule) {\n          if (!rule.attributes.align) {\n            rule.attributes.align = {};\n            rule.attributesOrder.push('align');\n          }\n        }\n      });\n    };\n    var overrideSettings = function (editor) {\n      var defaultFontsizeFormats = '8pt=1 10pt=2 12pt=3 14pt=4 18pt=5 24pt=6 36pt=7';\n      var defaultFontsFormats = 'Andale Mono=andale mono,monospace;' + 'Arial=arial,helvetica,sans-serif;' + 'Arial Black=arial black,sans-serif;' + 'Book Antiqua=book antiqua,palatino,serif;' + 'Comic Sans MS=comic sans ms,sans-serif;' + 'Courier New=courier new,courier,monospace;' + 'Georgia=georgia,palatino,serif;' + 'Helvetica=helvetica,arial,sans-serif;' + 'Impact=impact,sans-serif;' + 'Symbol=symbol;' + 'Tahoma=tahoma,arial,helvetica,sans-serif;' + 'Terminal=terminal,monaco,monospace;' + 'Times New Roman=times new roman,times,serif;' + 'Trebuchet MS=trebuchet ms,geneva,sans-serif;' + 'Verdana=verdana,geneva,sans-serif;' + 'Webdings=webdings;' + 'Wingdings=wingdings,zapf dingbats';\n      setInlineStyles(editor, false);\n      if (!getFontSizeFormats(editor)) {\n        setFontSizeFormats(editor, defaultFontsizeFormats);\n      }\n      if (!getFontFormats(editor)) {\n        setFontFormats(editor, defaultFontsFormats);\n      }\n    };\n    var setup = function (editor) {\n      overrideSettings(editor);\n      editor.on('PreInit', function () {\n        return overrideFormats(editor);\n      });\n    };\n\n    function Plugin () {\n      global.add('legacyoutput', function (editor) {\n        setup(editor);\n      });\n    }\n\n    Plugin();\n\n}());\n\n\n//# sourceURL=webpack:///./src/js/plugins/legacyoutput/plugin.js?")}});