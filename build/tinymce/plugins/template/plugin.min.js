/*! 
* Copyright (c) Tiny Technologies, Inc. All rights reserved.
* Licensed under the LGPL or a commercial license.
* For LGPL see License.txt in the project root for license information.
* For commercial licenses see https://www.tiny.cloud/
* 
*  Version: 5.7.0 (2021-02-10)
*  */
!function(t){var a={};function r(n){if(a[n])return a[n].exports;var e=a[n]={i:n,l:!1,exports:{}};return t[n].call(e.exports,e,e.exports,r),e.l=!0,e.exports}r.m=t,r.c=a,r.d=function(n,e,t){r.o(n,e)||Object.defineProperty(n,e,{configurable:!1,enumerable:!0,get:t})},r.r=function(n){Object.defineProperty(n,"__esModule",{value:!0})},r.n=function(n){var e=n&&n.__esModule?function(){return n["default"]}:function(){return n};return r.d(e,"a",e),e},r.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},r.p="",r(r.s="./src/js/plugins/template/plugin.js")}({"./src/js/plugins/template/plugin.js":function(module,exports){eval("/**\n  * Copyright (c) Tiny Technologies, Inc. All rights reserved.\n  * Licensed under the LGPL or a commercial license.\n  * For LGPL see License.txt in the project root for license information.\n  * For commercial licenses see https://www.tiny.cloud/\n  *\n  * Version: 5.7.0 (2021-02-10)\n  */\n (function () {\n    'use strict';\n\n    var global = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    var noop = function () {\n    };\n    var constant = function (value) {\n      return function () {\n        return value;\n      };\n    };\n    function curry(fn) {\n      var initialArgs = [];\n      for (var _i = 1; _i < arguments.length; _i++) {\n        initialArgs[_i - 1] = arguments[_i];\n      }\n      return function () {\n        var restArgs = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n          restArgs[_i] = arguments[_i];\n        }\n        var all = initialArgs.concat(restArgs);\n        return fn.apply(null, all);\n      };\n    }\n    var never = constant(false);\n    var always = constant(true);\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.util.Tools');\n\n    var global$2 = tinymce.util.Tools.resolve('tinymce.util.XHR');\n\n    var getCreationDateClasses = function (editor) {\n      return editor.getParam('template_cdate_classes', 'cdate');\n    };\n    var getModificationDateClasses = function (editor) {\n      return editor.getParam('template_mdate_classes', 'mdate');\n    };\n    var getSelectedContentClasses = function (editor) {\n      return editor.getParam('template_selected_content_classes', 'selcontent');\n    };\n    var getPreviewReplaceValues = function (editor) {\n      return editor.getParam('template_preview_replace_values');\n    };\n    var getContentStyle = function (editor) {\n      return editor.getParam('content_style', '', 'string');\n    };\n    var shouldUseContentCssCors = function (editor) {\n      return editor.getParam('content_css_cors', false, 'boolean');\n    };\n    var getTemplateReplaceValues = function (editor) {\n      return editor.getParam('template_replace_values');\n    };\n    var getTemplates = function (editor) {\n      return editor.getParam('templates');\n    };\n    var getCdateFormat = function (editor) {\n      return editor.getParam('template_cdate_format', editor.translate('%Y-%m-%d'));\n    };\n    var getMdateFormat = function (editor) {\n      return editor.getParam('template_mdate_format', editor.translate('%Y-%m-%d'));\n    };\n    var getBodyClassFromHash = function (editor) {\n      var bodyClass = editor.getParam('body_class', '', 'hash');\n      return bodyClass[editor.id] || '';\n    };\n    var getBodyClass = function (editor) {\n      var bodyClass = editor.getParam('body_class', '', 'string');\n      if (bodyClass.indexOf('=') === -1) {\n        return bodyClass;\n      } else {\n        return getBodyClassFromHash(editor);\n      }\n    };\n\n    var addZeros = function (value, len) {\n      value = '' + value;\n      if (value.length < len) {\n        for (var i = 0; i < len - value.length; i++) {\n          value = '0' + value;\n        }\n      }\n      return value;\n    };\n    var getDateTime = function (editor, fmt, date) {\n      var daysShort = 'Sun Mon Tue Wed Thu Fri Sat Sun'.split(' ');\n      var daysLong = 'Sunday Monday Tuesday Wednesday Thursday Friday Saturday Sunday'.split(' ');\n      var monthsShort = 'Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec'.split(' ');\n      var monthsLong = 'January February March April May June July August September October November December'.split(' ');\n      date = date || new Date();\n      fmt = fmt.replace('%D', '%m/%d/%Y');\n      fmt = fmt.replace('%r', '%I:%M:%S %p');\n      fmt = fmt.replace('%Y', '' + date.getFullYear());\n      fmt = fmt.replace('%y', '' + date.getYear());\n      fmt = fmt.replace('%m', addZeros(date.getMonth() + 1, 2));\n      fmt = fmt.replace('%d', addZeros(date.getDate(), 2));\n      fmt = fmt.replace('%H', '' + addZeros(date.getHours(), 2));\n      fmt = fmt.replace('%M', '' + addZeros(date.getMinutes(), 2));\n      fmt = fmt.replace('%S', '' + addZeros(date.getSeconds(), 2));\n      fmt = fmt.replace('%I', '' + ((date.getHours() + 11) % 12 + 1));\n      fmt = fmt.replace('%p', '' + (date.getHours() < 12 ? 'AM' : 'PM'));\n      fmt = fmt.replace('%B', '' + editor.translate(monthsLong[date.getMonth()]));\n      fmt = fmt.replace('%b', '' + editor.translate(monthsShort[date.getMonth()]));\n      fmt = fmt.replace('%A', '' + editor.translate(daysLong[date.getDay()]));\n      fmt = fmt.replace('%a', '' + editor.translate(daysShort[date.getDay()]));\n      fmt = fmt.replace('%%', '%');\n      return fmt;\n    };\n\n    var createTemplateList = function (editor, callback) {\n      return function () {\n        var templateList = getTemplates(editor);\n        if (typeof templateList === 'function') {\n          templateList(callback);\n          return;\n        }\n        if (typeof templateList === 'string') {\n          global$2.send({\n            url: templateList,\n            success: function (text) {\n              callback(JSON.parse(text));\n            }\n          });\n        } else {\n          callback(templateList);\n        }\n      };\n    };\n    var replaceTemplateValues = function (html, templateValues) {\n      global$1.each(templateValues, function (v, k) {\n        if (typeof v === 'function') {\n          v = v(k);\n        }\n        html = html.replace(new RegExp('\\\\{\\\\$' + k + '\\\\}', 'g'), v);\n      });\n      return html;\n    };\n    var replaceVals = function (editor, e) {\n      var dom = editor.dom, vl = getTemplateReplaceValues(editor);\n      global$1.each(dom.select('*', e), function (e) {\n        global$1.each(vl, function (v, k) {\n          if (dom.hasClass(e, k)) {\n            if (typeof vl[k] === 'function') {\n              vl[k](e);\n            }\n          }\n        });\n      });\n    };\n    var hasClass = function (n, c) {\n      return new RegExp('\\\\b' + c + '\\\\b', 'g').test(n.className);\n    };\n    var insertTemplate = function (editor, _ui, html) {\n      var el;\n      var dom = editor.dom;\n      var sel = editor.selection.getContent();\n      html = replaceTemplateValues(html, getTemplateReplaceValues(editor));\n      el = dom.create('div', null, html);\n      var n = dom.select('.mceTmpl', el);\n      if (n && n.length > 0) {\n        el = dom.create('div', null);\n        el.appendChild(n[0].cloneNode(true));\n      }\n      global$1.each(dom.select('*', el), function (n) {\n        if (hasClass(n, getCreationDateClasses(editor).replace(/\\s+/g, '|'))) {\n          n.innerHTML = getDateTime(editor, getCdateFormat(editor));\n        }\n        if (hasClass(n, getModificationDateClasses(editor).replace(/\\s+/g, '|'))) {\n          n.innerHTML = getDateTime(editor, getMdateFormat(editor));\n        }\n        if (hasClass(n, getSelectedContentClasses(editor).replace(/\\s+/g, '|'))) {\n          n.innerHTML = sel;\n        }\n      });\n      replaceVals(editor, el);\n      editor.execCommand('mceInsertContent', false, el.innerHTML);\n      editor.addVisual();\n    };\n\n    var register = function (editor) {\n      editor.addCommand('mceInsertTemplate', curry(insertTemplate, editor));\n    };\n\n    var setup = function (editor) {\n      editor.on('PreProcess', function (o) {\n        var dom = editor.dom, dateFormat = getMdateFormat(editor);\n        global$1.each(dom.select('div', o.node), function (e) {\n          if (dom.hasClass(e, 'mceTmpl')) {\n            global$1.each(dom.select('*', e), function (e) {\n              if (dom.hasClass(e, getModificationDateClasses(editor).replace(/\\s+/g, '|'))) {\n                e.innerHTML = getDateTime(editor, dateFormat);\n              }\n            });\n            replaceVals(editor, e);\n          }\n        });\n      });\n    };\n\n    var none = function () {\n      return NONE;\n    };\n    var NONE = function () {\n      var eq = function (o) {\n        return o.isNone();\n      };\n      var call = function (thunk) {\n        return thunk();\n      };\n      var id = function (n) {\n        return n;\n      };\n      var me = {\n        fold: function (n, _s) {\n          return n();\n        },\n        is: never,\n        isSome: never,\n        isNone: always,\n        getOr: id,\n        getOrThunk: call,\n        getOrDie: function (msg) {\n          throw new Error(msg || 'error: getOrDie called on none.');\n        },\n        getOrNull: constant(null),\n        getOrUndefined: constant(undefined),\n        or: id,\n        orThunk: call,\n        map: none,\n        each: noop,\n        bind: none,\n        exists: never,\n        forall: always,\n        filter: none,\n        equals: eq,\n        equals_: eq,\n        toArray: function () {\n          return [];\n        },\n        toString: constant('none()')\n      };\n      return me;\n    }();\n    var some = function (a) {\n      var constant_a = constant(a);\n      var self = function () {\n        return me;\n      };\n      var bind = function (f) {\n        return f(a);\n      };\n      var me = {\n        fold: function (n, s) {\n          return s(a);\n        },\n        is: function (v) {\n          return a === v;\n        },\n        isSome: always,\n        isNone: never,\n        getOr: constant_a,\n        getOrThunk: constant_a,\n        getOrDie: constant_a,\n        getOrNull: constant_a,\n        getOrUndefined: constant_a,\n        or: self,\n        orThunk: self,\n        map: function (f) {\n          return some(f(a));\n        },\n        each: function (f) {\n          f(a);\n        },\n        bind: bind,\n        exists: bind,\n        forall: bind,\n        filter: function (f) {\n          return f(a) ? me : NONE;\n        },\n        toArray: function () {\n          return [a];\n        },\n        toString: function () {\n          return 'some(' + a + ')';\n        },\n        equals: function (o) {\n          return o.is(a);\n        },\n        equals_: function (o, elementEq) {\n          return o.fold(never, function (b) {\n            return elementEq(a, b);\n          });\n        }\n      };\n      return me;\n    };\n    var from = function (value) {\n      return value === null || value === undefined ? NONE : some(value);\n    };\n    var Optional = {\n      some: some,\n      none: none,\n      from: from\n    };\n\n    var map = function (xs, f) {\n      var len = xs.length;\n      var r = new Array(len);\n      for (var i = 0; i < len; i++) {\n        var x = xs[i];\n        r[i] = f(x, i);\n      }\n      return r;\n    };\n    var findUntil = function (xs, pred, until) {\n      for (var i = 0, len = xs.length; i < len; i++) {\n        var x = xs[i];\n        if (pred(x, i)) {\n          return Optional.some(x);\n        } else if (until(x, i)) {\n          break;\n        }\n      }\n      return Optional.none();\n    };\n    var find = function (xs, pred) {\n      return findUntil(xs, pred, never);\n    };\n\n    var global$3 = tinymce.util.Tools.resolve('tinymce.Env');\n\n    var global$4 = tinymce.util.Tools.resolve('tinymce.util.Promise');\n\n    var hasOwnProperty = Object.hasOwnProperty;\n    var get = function (obj, key) {\n      return has(obj, key) ? Optional.from(obj[key]) : Optional.none();\n    };\n    var has = function (obj, key) {\n      return hasOwnProperty.call(obj, key);\n    };\n\n    var entitiesAttr = {\n      '\"': '&quot;',\n      '<': '&lt;',\n      '>': '&gt;',\n      '&': '&amp;',\n      '\\'': '&#039;'\n    };\n    var htmlEscape = function (html) {\n      return html.replace(/[\"'<>&]/g, function (match) {\n        return get(entitiesAttr, match).getOr(match);\n      });\n    };\n\n    var getPreviewContent = function (editor, html) {\n      if (html.indexOf('<html>') === -1) {\n        var contentCssEntries_1 = '';\n        var contentStyle = getContentStyle(editor);\n        var cors_1 = shouldUseContentCssCors(editor) ? ' crossorigin=\"anonymous\"' : '';\n        global$1.each(editor.contentCSS, function (url) {\n          contentCssEntries_1 += '<link type=\"text/css\" rel=\"stylesheet\" href=\"' + editor.documentBaseURI.toAbsolute(url) + '\"' + cors_1 + '>';\n        });\n        if (contentStyle) {\n          contentCssEntries_1 += '<style type=\"text/css\">' + contentStyle + '</style>';\n        }\n        var bodyClass = getBodyClass(editor);\n        var encode = editor.dom.encode;\n        var isMetaKeyPressed = global$3.mac ? 'e.metaKey' : 'e.ctrlKey && !e.altKey';\n        var preventClicksOnLinksScript = '<script>' + 'document.addEventListener && document.addEventListener(\"click\", function(e) {' + 'for (var elm = e.target; elm; elm = elm.parentNode) {' + 'if (elm.nodeName === \"A\" && !(' + isMetaKeyPressed + ')) {' + 'e.preventDefault();' + '}' + '}' + '}, false);' + '<\/script> ';\n        var directionality = editor.getBody().dir;\n        var dirAttr = directionality ? ' dir=\"' + encode(directionality) + '\"' : '';\n        html = '<!DOCTYPE html>' + '<html>' + '<head>' + '<base href=\"' + encode(editor.documentBaseURI.getURI()) + '\">' + contentCssEntries_1 + preventClicksOnLinksScript + '</head>' + '<body class=\"' + encode(bodyClass) + '\"' + dirAttr + '>' + html + '</body>' + '</html>';\n      }\n      return replaceTemplateValues(html, getPreviewReplaceValues(editor));\n    };\n    var open = function (editor, templateList) {\n      var createTemplates = function () {\n        if (!templateList || templateList.length === 0) {\n          var message = editor.translate('No templates defined.');\n          editor.notificationManager.open({\n            text: message,\n            type: 'info'\n          });\n          return Optional.none();\n        }\n        return Optional.from(global$1.map(templateList, function (template, index) {\n          var isUrlTemplate = function (t) {\n            return t.url !== undefined;\n          };\n          return {\n            selected: index === 0,\n            text: template.title,\n            value: {\n              url: isUrlTemplate(template) ? Optional.from(template.url) : Optional.none(),\n              content: !isUrlTemplate(template) ? Optional.from(template.content) : Optional.none(),\n              description: template.description\n            }\n          };\n        }));\n      };\n      var createSelectBoxItems = function (templates) {\n        return map(templates, function (t) {\n          return {\n            text: t.text,\n            value: t.text\n          };\n        });\n      };\n      var findTemplate = function (templates, templateTitle) {\n        return find(templates, function (t) {\n          return t.text === templateTitle;\n        });\n      };\n      var loadFailedAlert = function (api) {\n        editor.windowManager.alert('Could not load the specified template.', function () {\n          return api.focus('template');\n        });\n      };\n      var getTemplateContent = function (t) {\n        return new global$4(function (resolve, reject) {\n          t.value.url.fold(function () {\n            return resolve(t.value.content.getOr(''));\n          }, function (url) {\n            return global$2.send({\n              url: url,\n              success: function (html) {\n                resolve(html);\n              },\n              error: function (e) {\n                reject(e);\n              }\n            });\n          });\n        });\n      };\n      var onChange = function (templates, updateDialog) {\n        return function (api, change) {\n          if (change.name === 'template') {\n            var newTemplateTitle = api.getData().template;\n            findTemplate(templates, newTemplateTitle).each(function (t) {\n              api.block('Loading...');\n              getTemplateContent(t).then(function (previewHtml) {\n                updateDialog(api, t, previewHtml);\n              }).catch(function () {\n                updateDialog(api, t, '');\n                api.disable('save');\n                loadFailedAlert(api);\n              });\n            });\n          }\n        };\n      };\n      var onSubmit = function (templates) {\n        return function (api) {\n          var data = api.getData();\n          findTemplate(templates, data.template).each(function (t) {\n            getTemplateContent(t).then(function (previewHtml) {\n              insertTemplate(editor, false, previewHtml);\n              api.close();\n            }).catch(function () {\n              api.disable('save');\n              loadFailedAlert(api);\n            });\n          });\n        };\n      };\n      var openDialog = function (templates) {\n        var selectBoxItems = createSelectBoxItems(templates);\n        var buildDialogSpec = function (bodyItems, initialData) {\n          return {\n            title: 'Insert Template',\n            size: 'large',\n            body: {\n              type: 'panel',\n              items: bodyItems\n            },\n            initialData: initialData,\n            buttons: [\n              {\n                type: 'cancel',\n                name: 'cancel',\n                text: 'Cancel'\n              },\n              {\n                type: 'submit',\n                name: 'save',\n                text: 'Save',\n                primary: true\n              }\n            ],\n            onSubmit: onSubmit(templates),\n            onChange: onChange(templates, updateDialog)\n          };\n        };\n        var updateDialog = function (dialogApi, template, previewHtml) {\n          var content = getPreviewContent(editor, previewHtml);\n          var bodyItems = [\n            {\n              type: 'selectbox',\n              name: 'template',\n              label: 'Templates',\n              items: selectBoxItems\n            },\n            {\n              type: 'htmlpanel',\n              html: '<p aria-live=\"polite\">' + htmlEscape(template.value.description) + '</p>'\n            },\n            {\n              label: 'Preview',\n              type: 'iframe',\n              name: 'preview',\n              sandboxed: false\n            }\n          ];\n          var initialData = {\n            template: template.text,\n            preview: content\n          };\n          dialogApi.unblock();\n          dialogApi.redial(buildDialogSpec(bodyItems, initialData));\n          dialogApi.focus('template');\n        };\n        var dialogApi = editor.windowManager.open(buildDialogSpec([], {\n          template: '',\n          preview: ''\n        }));\n        dialogApi.block('Loading...');\n        getTemplateContent(templates[0]).then(function (previewHtml) {\n          updateDialog(dialogApi, templates[0], previewHtml);\n        }).catch(function () {\n          updateDialog(dialogApi, templates[0], '');\n          dialogApi.disable('save');\n          loadFailedAlert(dialogApi);\n        });\n      };\n      var optTemplates = createTemplates();\n      optTemplates.each(openDialog);\n    };\n\n    var showDialog = function (editor) {\n      return function (templates) {\n        open(editor, templates);\n      };\n    };\n    var register$1 = function (editor) {\n      editor.ui.registry.addButton('template', {\n        icon: 'template',\n        tooltip: 'Insert template',\n        onAction: createTemplateList(editor, showDialog(editor))\n      });\n      editor.ui.registry.addMenuItem('template', {\n        icon: 'template',\n        text: 'Insert template...',\n        onAction: createTemplateList(editor, showDialog(editor))\n      });\n    };\n\n    function Plugin () {\n      global.add('template', function (editor) {\n        register$1(editor);\n        register(editor);\n        setup(editor);\n      });\n    }\n\n    Plugin();\n\n}());\n\n\n//# sourceURL=webpack:///./src/js/plugins/template/plugin.js?")}});